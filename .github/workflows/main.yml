name: Build and Deploy Terra Stabilis

on:
  push:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: lovemetrue/terra-stabilis

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    strategy:
      matrix:
        component: [bot, admin]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-${{ matrix.component }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Bot image
        if: matrix.component == 'bot'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./app/bot/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Admin image
        if: matrix.component == 'admin'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./app/admin/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Show production files (debug)
        run: |
          echo "Listing files in app directory:"
          ls -la app/
          echo "Checking for required files:"
          if [ -f app/docker-compose.yml ]; then
            echo "‚úì docker-compose.yml found"
          else
            echo "‚úó docker-compose.yml missing"
            exit 1
          fi
          if [ -f app/.env.example ]; then
            echo "‚úì .env.example found"
          else
            echo "‚úó .env.example missing"
            exit 1
          fi

      - name: Copy production files to server
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          source: "app/"
          target: "/opt/terrastabilis/"
          overwrite: true

      - name: Deploy and health check
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            set -e  # Exit on any error

            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            sudo mkdir -p /opt/terrastabilis
            sudo chown $USER:$USER /opt/terrastabilis

            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞
            cd /opt/terrastabilis

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ .env —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if [ ! -f .env ]; then
              if [ -f .env.example ]; then
                cp .env.example .env
                echo "‚ö†Ô∏è  .env —Å–æ–∑–¥–∞–Ω –∏–∑ .env.example ‚Äî –æ–±–Ω–æ–≤–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ .env!"
              else
                echo "‚ùå .env.example –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å .env"
                exit 1
              fi
            fi

            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
            mkdir -p ~/.cloud-certs
            curl -o ~/.cloud-certs/root.crt "https://st.timeweb.com/cloud-static/ca.crt"
            chmod 0600 ~/.cloud-certs/root.crt

            # –õ–æ–≥–∏–Ω–∏–º—Å—è –≤ GitHub Container Registry
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
            echo "üõë Stopping old containers..."
            docker compose down || true

            # Pull –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ–±—Ä–∞–∑–æ–≤
            echo "üì• Pulling latest images..."
            docker compose pull

            # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
            echo "üöÄ Starting containers..."
            docker compose up -d

            # –î–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–ø—É—Å–∫
            echo "‚è≥ Waiting for containers to start..."
            sleep 30

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
            echo "üìä Checking container status..."
            docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∑–∞–ø—É—â–µ–Ω—ã
            echo "üîç Checking if all containers are running..."
            if ! docker ps --format "table {{.Names}}" | grep -q "terrastabilis-bot"; then
              echo "‚ùå Bot container is not running!"
              echo "üìã Bot container logs:"
              docker logs terrastabilis-bot --tail 20 || true
              exit 1
            fi

            if ! docker ps --format "table {{.Names}}" | grep -q "terrastabilis-admin"; then
              echo "‚ùå Admin container is not running!"
              echo "üìã Admin container logs:"
              docker logs terrastabilis-admin --tail 20 || true
              exit 1
            fi

            if ! docker ps --format "table {{.Names}}" | grep -q "terrastabilis-redis"; then
              echo "‚ùå Redis container is not running!"
              echo "üìã Redis container logs:"
              docker logs terrastabilis-redis --tail 10 || true
              exit 1
            fi

            echo "‚úÖ All containers are running!"

            # Health check –¥–ª—è –∞–¥–º–∏–Ω–∫–∏ (–ø—Ä–æ–≤–µ—Ä—è–µ–º HTTP endpoint)
            echo "üè• Performing health check on admin..."
            ADMIN_HEALTH=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8000/ || echo "000")
            if [ "$ADMIN_HEALTH" = "000" ]; then
              echo "‚ùå Admin health check failed - service not responding"
              echo "üìã Admin container logs:"
              docker logs terrastabilis-admin --tail 30
              exit 1
            elif [ "$ADMIN_HEALTH" = "500" ]; then
              echo "‚ùå Admin health check failed - internal server error"
              echo "üìã Admin container logs:"
              docker logs terrastabilis-admin --tail 30
              exit 1
            else
              echo "‚úÖ Admin health check passed with status: $ADMIN_HEALTH"
            fi

            # Health check –¥–ª—è Redis
            echo "üè• Performing health check on Redis..."
            if docker exec terrastabilis-redis redis-cli ping | grep -q "PONG"; then
              echo "‚úÖ Redis health check passed"
            else
              echo "‚ùå Redis health check failed"
              docker logs terrastabilis-redis --tail 10
              exit 1
            fi

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏ –±–æ—Ç–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫
            echo "üîç Checking bot logs for errors..."
            if docker logs terrastabilis-bot --tail 20 2>&1 | grep -i "error\|exception\|failed" | grep -v "DEBUG"; then
              echo "‚ö†Ô∏è  Bot has some errors in logs, but continuing..."
              docker logs terrastabilis-bot --tail 10 | grep -i "error\|exception\|failed" | head -5
            else
              echo "‚úÖ Bot logs look clean"
            fi

            # –û—á–∏—â–∞–µ–º –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –æ–±—Ä–∞–∑—ã
            echo "üßπ Cleaning up unused images..."
            docker image prune -f

            # –§–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
            echo " "
            echo "üéâ Deployment completed successfully!"
            echo "üìä Final container status:"
            docker ps --format "table {{.Names}}\t{{.Status}}\t{{.RunningFor}}\t{{.Ports}}"
            
            # –ü–æ–ª—É—á–∞–µ–º –≤–Ω–µ—à–Ω–∏–π IP –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            echo " "
            echo "üåê Services:"
            echo "   - Admin panel: http://localhost:8000"
            echo "   - Bot: running in background"
            echo "   - Redis: running on port 6379"