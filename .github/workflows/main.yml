name: Build and Deploy Terra Stabilis
on:
  push:
    branches: [ dev, main ]

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: lovemetrue/terra-stabilis

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev'
    permissions:
      contents: read
      packages: write

    strategy:
      matrix:
        component: [ bot, admin ]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-${{ matrix.component }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest

      - name: Build and push Bot image
        if: matrix.component == 'bot'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./app/bot/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Admin image
        if: matrix.component == 'admin'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./app/admin/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Copy production files to server
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          source: "app/docker-compose.yml,app/.env.example"
          target: "/opt/terrastabilis/"
          overwrite: true

      - name: Deploy and health check
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            set -e

            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            sudo mkdir -p /opt/terrastabilis
            sudo chown $USER:$USER /opt/terrastabilis
            
            echo "üßπ Cleaning up Docker resources..."
      
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏ —É–¥–∞–ª—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
            echo "üõë Stopping containers..."
            docker compose down || true
            
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –æ–±—Ä–∞–∑—ã, –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã, —Å–µ—Ç–∏ –∏ build cache
            docker system prune -a -f --volumes
            
            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ: –º–æ–∂–Ω–æ —É–¥–∞–ª—è—Ç—å –±–æ–ª–µ–µ —Ç–æ—á–µ—á–Ω–æ
            # docker image prune -a -f  # –≤—Å–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –æ–±—Ä–∞–∑—ã
            # docker container prune -f # –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
            # docker volume prune -f    # –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ volumes
            
            echo "üìä Disk usage after cleanup:"
            df -h
            
            cd /opt/terrastabilis

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤ –≤ –∫–æ—Ä–Ω–µ
            echo "=== Checking files in /opt/terrastabilis ==="
            ls -la

            # –ï—Å–ª–∏ —Ñ–∞–π–ª—ã –≤ app/, –ø–µ—Ä–µ–º–µ—â–∞–µ–º –∏—Ö –≤ –∫–æ—Ä–µ–Ω—å
            if [ -f app/docker-compose.yml ]; then
              echo "üìÅ Files found in app/, moving to root..."
              mv app/docker-compose.yml ./
              mv app/.env.example ./
              rm -rf app/
              echo "‚úÖ Files moved to root directory"
            fi

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
            if [ ! -f docker-compose.yml ]; then
              echo "‚ùå docker-compose.yml not found after moving!"
              exit 1
            fi

            # –°–æ–∑–¥–∞–µ–º .env –∏–∑ .env.example –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if [ ! -f .env ] && [ -f .env.example ]; then
              cp .env.example .env
              echo "‚ö†Ô∏è  .env created from .env.example - please update sensitive values!"
            elif [ -f .env ]; then
              echo "‚úÖ Using existing .env file"
            else
              echo "‚ùå Neither .env nor .env.example found!"
              exit 1
            fi

            # SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã
            mkdir -p ~/.cloud-certs
            curl -o ~/.cloud-certs/root.crt "https://st.timeweb.com/cloud-static/ca.crt"
            chmod 0600 ~/.cloud-certs/root.crt

            # –õ–æ–≥–∏–Ω–∏–º—Å—è –≤ registry
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

            # –î–µ–ø–ª–æ–π
            echo "üõë Stopping old containers..."
            docker compose down || true

            echo "üì• Pulling latest images..."
            docker compose pull

            echo "üöÄ Starting containers..."
            docker compose up -d

            echo "‚è≥ Waiting for containers to start..."
            sleep 30

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
            echo "üìä Container status:"
            docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∑–∞–ø—É—â–µ–Ω—ã
            for container in terrastabilis-bot terrastabilis-admin terrastabilis-redis; do
              if docker ps --format "{{.Names}}" | grep -q "$container"; then
                echo "‚úÖ $container is running"
              else
                echo "‚ùå $container is NOT running"
                docker logs "$container" --tail 10 || true
                exit 1
              fi
            done

            echo "üéâ Deployment successful!"