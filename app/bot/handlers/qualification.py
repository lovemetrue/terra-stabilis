from aiogram import Router, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext

from app.bot.keyboards.main_menu import (
    get_main_menu_keyboard, get_geodata_keyboard, get_stability_keyboard,
    get_2d_keyboard, get_3d_keyboard, get_monitoring_keyboard, get_contact_keyboard
)
from app.bot.states import ServiceSelection, Calculation
from apps.bot_data.bot_utils import save_user_event, save_calculation, save_lead

router = Router()

# –¶–µ–Ω—ã –¥–ª—è —É—Å–ª—É–≥
SERVICE_PRICES = {
    "program_development": 25000,
    "mapping": 18000,
    "core_documentation": 22000,
    "2d_ogr": 35000,
    "2d_pgr": 45000,
    "3d_ogr": 55000,
    "3d_pgr": 65000,
    "geomechanic": 20000,
    "georadar": 30000,
    "prism": 28000,
}


@router.message(F.text == "üìä –°–±–æ—Ä –∏—Å—Ö–æ–¥–Ω—ã—Ö –≥–µ–æ –¥–∞–Ω–Ω—ã—Ö")
async def service_geodata(message: Message, state: FSMContext):
    """–£—Å–ª—É–≥–∞ 1: –°–±–æ—Ä –∏—Å—Ö–æ–¥–Ω—ã—Ö –≥–µ–æ –¥–∞–Ω–Ω—ã—Ö"""
    await state.set_state(ServiceSelection.waiting_for_subservice)
    await state.update_data(main_service="geodata_collection")

    await save_user_event(
        user_id=message.from_user.id,
        event_type='service_select',
        event_data={'service': 'geodata_collection'},
        username=message.from_user.username,
        first_name=message.from_user.first_name,
        last_name=message.from_user.last_name
    )

    service_text = """
üìä –°–±–æ—Ä –∏—Å—Ö–æ–¥–Ω—ã—Ö –≥–µ–æ –¥–∞–Ω–Ω—ã—Ö

–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —É—Å–ª—É–≥—É:
    """

    await message.answer(
        service_text,
        reply_markup=get_geodata_keyboard()
    )


@router.message(F.text == "üìê –†–∞—Å—á–µ—Ç—ã —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏")
async def service_stability(message: Message, state: FSMContext):
    """–£—Å–ª—É–≥–∞ 2: –†–∞—Å—á–µ—Ç—ã —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏"""
    await state.set_state(ServiceSelection.waiting_for_subservice)
    await state.update_data(main_service="stability_calculation")

    await save_user_event(
        user_id=message.from_user.id,
        event_type='service_select',
        event_data={'service': 'stability_calculation'},
        username=message.from_user.username,
        first_name=message.from_user.first_name,
        last_name=message.from_user.last_name
    )

    service_text = """
üìê –†–∞—Å—á–µ—Ç—ã —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å—á–µ—Ç–∞:
    """

    await message.answer(
        service_text,
        reply_markup=get_stability_keyboard()
    )


@router.message(F.text == "üë®‚Äçüíº –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –≥–µ–æ–º–µ—Ö–∞–Ω–∏–∫–∞")
async def service_geomechanic(message: Message, state: FSMContext):
    """–£—Å–ª—É–≥–∞ 3: –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –≥–µ–æ–º–µ—Ö–∞–Ω–∏–∫–∞"""
    await process_final_service(message, state, "geomechanic")


@router.message(F.text == "üì° –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–Ω–∂–µ–Ω–µ—Ä–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤")
async def service_monitoring(message: Message, state: FSMContext):
    """–£—Å–ª—É–≥–∞ 4: –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–Ω–∂–µ–Ω–µ—Ä–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤"""
    await state.set_state(ServiceSelection.waiting_for_subservice)
    await state.update_data(main_service="monitoring")

    await save_user_event(
        user_id=message.from_user.id,
        event_type='service_select',
        event_data={'service': 'monitoring'},
        username=message.from_user.username,
        first_name=message.from_user.first_name,
        last_name=message.from_user.last_name
    )

    service_text = """
üì° –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–Ω–∂–µ–Ω–µ—Ä–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:
    """

    await message.answer(
        service_text,
        reply_markup=get_monitoring_keyboard()
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–¥—É—Å–ª—É–≥ —Å–±–æ—Ä–∞ –≥–µ–æ–¥–∞–Ω–Ω—ã—Ö
@router.message(F.text == "üìù –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã")
async def service_program_development(message: Message, state: FSMContext):
    """–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã –≥–µ–æ—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π"""
    await process_final_service(message, state, "program_development")


@router.message(F.text == "üó∫Ô∏è –ì–µ–æ—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∫–∞—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
async def service_mapping(message: Message, state: FSMContext):
    """–ì–µ–æ—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∫–∞—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"""
    await process_final_service(message, state, "mapping")


@router.message(F.text == "üíé –î–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–µ—Ä–Ω–∞")
async def service_core_documentation(message: Message, state: FSMContext):
    """–ì–µ–æ—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–µ—Ä–Ω–∞"""
    await process_final_service(message, state, "core_documentation")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–¥—É—Å–ª—É–≥ —Ä–∞—Å—á–µ—Ç–æ–≤ —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏
@router.message(F.text == "2D —Ä–∞—Å—á–µ—Ç—ã")
async def service_2d_calculations(message: Message, state: FSMContext):
    """2D —Ä–∞—Å—á–µ—Ç—ã —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏"""
    await state.update_data(sub_service="2d_calculations")

    service_text = """
üìê 2D —Ä–∞—Å—á–µ—Ç—ã —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≥—Ä—É–Ω—Ç–∞:
‚Ä¢ –û–ì–† - –æ—Ç–≤–∞–ª—å–Ω—ã–µ –≥–æ—Ä–Ω—ã–µ –ø–æ—Ä–æ–¥—ã
‚Ä¢ –ü–ì–† - –ø—Ä–∏—Ä–æ–¥–Ω—ã–µ –≥–æ—Ä–Ω—ã–µ –ø–æ—Ä–æ–¥—ã
    """

    await message.answer(
        service_text,
        reply_markup=get_2d_keyboard()
    )


@router.message(F.text == "3D —Ä–∞—Å—á–µ—Ç—ã")
async def service_3d_calculations(message: Message, state: FSMContext):
    """3D —Ä–∞—Å—á–µ—Ç—ã —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏"""
    await state.update_data(sub_service="3d_calculations")

    service_text = """
üìä 3D —Ä–∞—Å—á–µ—Ç—ã —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≥—Ä—É–Ω—Ç–∞:
‚Ä¢ –û–ì–† - –æ—Ç–≤–∞–ª—å–Ω—ã–µ –≥–æ—Ä–Ω—ã–µ –ø–æ—Ä–æ–¥—ã  
‚Ä¢ –ü–ì–† - –ø—Ä–∏—Ä–æ–¥–Ω—ã–µ –≥–æ—Ä–Ω—ã–µ –ø–æ—Ä–æ–¥—ã
    """

    await message.answer(
        service_text,
        reply_markup=get_3d_keyboard()
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ä–∞—Å—á–µ—Ç–æ–≤
@router.message(F.text == "2D –û–ì–†")
async def service_2d_ogr(message: Message, state: FSMContext):
    """2D —Ä–∞—Å—á–µ—Ç –¥–ª—è –û–ì–†"""
    await process_final_service(message, state, "2d_ogr")


@router.message(F.text == "2D –ü–ì–†")
async def service_2d_pgr(message: Message, state: FSMContext):
    """2D —Ä–∞—Å—á–µ—Ç –¥–ª—è –ü–ì–†"""
    await process_final_service(message, state, "2d_pgr")


@router.message(F.text == "3D –û–ì–†")
async def service_3d_ogr(message: Message, state: FSMContext):
    """3D —Ä–∞—Å—á–µ—Ç –¥–ª—è –û–ì–†"""
    await process_final_service(message, state, "3d_ogr")


@router.message(F.text == "3D –ü–ì–†")
async def service_3d_pgr(message: Message, state: FSMContext):
    """3D —Ä–∞—Å—á–µ—Ç –¥–ª—è –ü–ì–†"""
    await process_final_service(message, state, "3d_pgr")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–¥—É—Å–ª—É–≥ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
@router.message(F.text == "üì° –ì–µ–æ—Ä–∞–¥–∞—Ä–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")
async def service_georadar(message: Message, state: FSMContext):
    """–ì–µ–æ—Ä–∞–¥–∞—Ä–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"""
    await process_final_service(message, state, "georadar")


@router.message(F.text == "üî∫ –ü—Ä–∏–∑–º–µ–Ω–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")
async def service_prism(message: Message, state: FSMContext):
    """–ü—Ä–∏–∑–º–µ–Ω–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"""
    await process_final_service(message, state, "prism")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –ù–∞–∑–∞–¥ –≤ —É—Å–ª—É–≥–∞—Ö
@router.message(ServiceSelection.waiting_for_subservice, F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def back_from_subservice(message: Message, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∏–∑ –ø–æ–¥—É—Å–ª—É–≥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await state.clear()

    await save_user_event(
        user_id=message.from_user.id,
        event_type='navigation',
        event_data={'page': 'main_menu', 'from': 'subservice'},
        username=message.from_user.username,
        first_name=message.from_user.first_name,
        last_name=message.from_user.last_name
    )

    await message.answer(
        "üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é - –≤—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:",
        reply_markup=get_main_menu_keyboard()
    )


async def process_final_service(message: Message, state: FSMContext, service_key: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω–µ—á–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥–∏ —Å —Ä–∞—Å—á–µ—Ç–æ–º —Ü–µ–Ω—ã"""
    price = SERVICE_PRICES.get(service_key, 0)

    if price == 0:
        await message.answer("‚ùå –£—Å–ª—É–≥–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤—ã–±–æ—Ä–µ
    user_data = await state.get_data()

    user_info = {
        'username': message.from_user.username,
        'first_name': message.from_user.first_name,
        'last_name': message.from_user.last_name
    }

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å—á–µ—Ç
    await save_calculation(
        user_id=message.from_user.id,
        service_type=service_key,
        parameters={},
        result=f"–†–∞—Å—Å—á–∏—Ç–∞–Ω–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥–∏: {price} —Ä—É–±.",
        price=price,
        **user_info
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–∏–¥ (–¥–∞–∂–µ –±–µ–∑ –∫–æ–Ω—Ç–∞–∫—Ç–∞)
    await save_lead(
        user_id=message.from_user.id,
        service_type=service_key,
        calculated_price=price,
        **user_info
    )

    await save_user_event(
        user_id=message.from_user.id,
        event_type='final_service_select',
        event_data={
            'main_service': user_data.get('main_service'),
            'sub_service': user_data.get('sub_service'),
            'final_service': service_key,
            'calculated_price': price
        },
        **user_info
    )

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Å–ª—É–≥–∏
    service_descriptions = {
        "program_development": "üìù –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã –≥–µ–æ—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π",
        "mapping": "üó∫Ô∏è –ì–µ–æ—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∫–∞—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ",
        "core_documentation": "üíé –ì–µ–æ—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–µ—Ä–Ω–∞",
        "2d_ogr": "üìê 2D —Ä–∞—Å—á–µ—Ç —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏ (–û–ì–†)",
        "2d_pgr": "üìê 2D —Ä–∞—Å—á–µ—Ç —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏ (–ü–ì–†)",
        "3d_ogr": "üìä 3D —Ä–∞—Å—á–µ—Ç —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏ (–û–ì–†)",
        "3d_pgr": "üìä 3D —Ä–∞—Å—á–µ—Ç —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏ (–ü–ì–†)",
        "geomechanic": "üë®‚Äçüíº –ì–µ–æ–º–µ—Ö–∞–Ω–∏–∫ –Ω–∞ —á–∞—Å",
        "georadar": "üì° –ì–µ–æ—Ä–∞–¥–∞—Ä–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥",
        "prism": "üî∫ –ü—Ä–∏–∑–º–µ–Ω–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"
    }

    service_name = service_descriptions.get(service_key, "–£—Å–ª—É–≥–∞")

    service_text = f"""
{service_name}

–ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {price:,} —Ä—É–±.

–•–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –∏ —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞?
    """

    await state.set_state(Calculation.showing_price)
    await state.update_data(
        final_service=service_key,
        calculated_price=price
    )

    await message.answer(
        service_text,
        reply_markup=get_contact_keyboard()
    )


@router.message(F.text == "‚úÖ –û—Å—Ç–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã")
async def request_contacts(message: Message, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –ø–æ—Å–ª–µ —Ä–∞—Å—á–µ—Ç–∞"""
    await save_user_event(
        user_id=message.from_user.id,
        event_type='contacts_request',
        event_data={},
        username=message.from_user.username,
        first_name=message.from_user.first_name,
        last_name=message.from_user.last_name
    )

    from app.bot.states import ContactCollection
    await state.set_state(ContactCollection.waiting_for_name)

    contacts_text = """
üìû –°–±–æ—Ä –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤

–î–ª—è —Å–≤—è–∑–∏ —Å –Ω–∞—à–∏–º–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º–∏ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–∞–º –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –≤–∞—à–∞ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è.

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:
    """

    from app.bot.keyboards.main_menu import get_skip_keyboard
    await message.answer(
        contacts_text,
        reply_markup=get_skip_keyboard()
    )