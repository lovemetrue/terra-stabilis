from aiogram import Router, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
import re

from app.bot.keyboards.main_menu import (
    get_main_menu_keyboard, get_geodata_keyboard, get_stability_keyboard,
    get_monitoring_keyboard, get_hydrogeology_keyboard, get_geomechanic_keyboard,
    get_contact_keyboard, get_yes_no_keyboard, get_back_keyboard
)
from app.bot.states import ContactCollection, ServiceSelection, Calculation
from apps.bot_data.bot_utils import save_user_event, save_calculation, save_lead

router = Router()

# –ë–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥
SERVICE_BASE_PRICES = {
    # –°–±–æ—Ä –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    "program_development": 300000,
    "core_documentation": 200000,

    # –†–∞—Å—á–µ—Ç—ã —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏
    "2d_ogr": 60000,
    "2d_pgr": 80000,
    "3d_ogr": 150000,
    "3d_pgr": 180000,

    # –ì–µ–æ–º–µ—Ö–∞–Ω–∏–∫ –Ω–∞ —á–∞—Å
    "senior_geomechanic": 6000,
    "chief_geomechanic": 12000,

    # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    "prism_monitoring": 150000,
    "georadar_interpretation": 400000,
    "tarps_setup": 500000,
    "tarps_development": 650000,

    # –ì–∏–¥—Ä–æ–≥–µ–æ–ª–æ–≥–∏—è
    "hydro_survey": 120000,
    "well_interpretation": 100000,
    "filtration_modeling": 250000,
    "drainage_calculation": 200000,
    "hydro_monitoring": 150000,
    "water_impact_assessment": 180000,
}


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–±–æ—Ä–∞ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
@router.message(F.text == "üìù –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã –≥–µ–æ—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π")
async def service_program_development(message: Message, state: FSMContext):
    """–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã –≥–µ–æ—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π - —Å–Ω–∞—á–∞–ª–∞ –≤–æ–ø—Ä–æ—Å—ã"""
    await state.set_state(ServiceSelection.waiting_for_geotech_wells)
    await state.update_data(
        service_key="program_development",
        main_service="geodata_collection"
    )

    question_text = """
üìù <b>–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã –≥–µ–æ—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π</b>

–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã, –¢–ó –∏ –ø–µ—Ä–µ—á–Ω—è –ø–æ–ª–µ–≤—ã—Ö –∏ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã—Ö —Ä–∞–±–æ—Ç.

–î–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã:

<b>–ö–∞–∫–∏–µ –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å—Ç—å?</b>
1. –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ –≥–µ–æ—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º —Å–∫–≤–∞–∂–∏–Ω–∞–º? (–¥–∞/–Ω–µ—Ç)
2. –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ –≥–µ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–º —Å–∫–≤–∞–∂–∏–Ω–∞–º? (–¥–∞/–Ω–µ—Ç)  
3. –ï—Å—Ç—å –ª–∏ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ –§–ú–°? (–¥–∞/–Ω–µ—Ç)

<b>–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å:</b>
–ï—Å—Ç—å –ª–∏ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ –≥–µ–æ—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º —Å–∫–≤–∞–∂–∏–Ω–∞–º?
    """

    await message.answer(
        question_text,
        reply_markup=get_yes_no_keyboard(),
        parse_mode='HTML'
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤ —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏
@router.message(F.text.in_(["2D –û–ì–†", "2D –ü–ì–†", "3D –û–ì–†", "3D –ü–ì–†"]))
async def service_stability_calculation(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–∞—Å—á–µ—Ç–∞ —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏ - —Å–Ω–∞—á–∞–ª–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ"""
    service_map = {
        "2D –û–ì–†": "2d_ogr",
        "2D –ü–ì–†": "2d_pgr",
        "3D –û–ì–†": "3d_ogr",
        "3D –ü–ì–†": "3d_pgr"
    }

    service_key = service_map[message.text]
    await state.set_state(ServiceSelection.waiting_for_calculations_count)
    await state.update_data(
        service_key=service_key,
        main_service="stability_calculation"
    )

    descriptions = {
        "2d_ogr": "2D —Ä–∞—Å—á–µ—Ç —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏ –æ—Ç–∫–æ—Å–æ–≤ –∏ —É—Å—Ç—É–ø–æ–≤ –¥–ª—è <b>–æ—Ç–∫—Ä—ã—Ç—ã—Ö –≥–æ—Ä–Ω—ã—Ö —Ä–∞–±–æ—Ç</b> (Slide, RS2)",
        "2d_pgr": "2D –∞–Ω–∞–ª–∏–∑ —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏ –ø–æ–¥–∑–µ–º–Ω—ã—Ö –∫–∞–º–µ—Ä, —à—Ç—Ä–µ–∫–æ–≤ –∏ —Ü–µ–ª–∏–∫–æ–≤ –¥–ª—è <b>–ø–æ–¥–∑–µ–º–Ω—ã—Ö –≥–æ—Ä–Ω—ã—Ö —Ä–∞–±–æ—Ç</b>",
        "3d_ogr": "3D –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏ –æ—Ç–∫–æ—Å–æ–≤ –∏ —É—Å—Ç—É–ø–æ–≤ –¥–ª—è <b>–æ—Ç–∫—Ä—ã—Ç—ã—Ö –≥–æ—Ä–Ω—ã—Ö —Ä–∞–±–æ—Ç</b> (RS3)",
        "3d_pgr": "3D-–∞–Ω–∞–ª–∏–∑ –Ω–∞–ø—Ä—è–∂–µ–Ω–Ω–æ-–¥–µ—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–∞—Å—Å–∏–≤–∞ –¥–ª—è <b>–ø–æ–¥–∑–µ–º–Ω—ã—Ö –≥–æ—Ä–Ω—ã—Ö —Ä–∞–±–æ—Ç</b>"
    }

    question_text = f"""
{message.text}

{descriptions[service_key]}

<b>–î–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—Å—á–µ—Ç–æ–≤:</b>
‚Ä¢ –û—Ç 5 —Ä–∞—Å—á–µ—Ç–æ–≤ - —Å–∫–∏–¥–∫–∞ 10%
‚Ä¢ –û—Ç 10 —Ä–∞—Å—á–µ—Ç–æ–≤ - —Å–∫–∏–¥–∫–∞ 20%
    """

    await message.answer(
        question_text,
        reply_markup=get_back_keyboard(),
        parse_mode='HTML'
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≥–µ–æ–º–µ—Ö–∞–Ω–∏–∫–∞ –Ω–∞ —á–∞—Å
@router.message(F.text.in_(["üë®‚Äçüíº –í–µ–¥—É—â–∏–π –≥–µ–æ–º–µ—Ö–∞–Ω–∏–∫", "üë®‚Äçüî¨ –ì–ª–∞–≤–Ω—ã–π –≥–µ–æ–º–µ—Ö–∞–Ω–∏–∫"]))
async def service_geomechanic_level(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è –≥–µ–æ–º–µ—Ö–∞–Ω–∏–∫–∞ - —Å–Ω–∞—á–∞–ª–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤"""
    service_map = {
        "üë®‚Äçüíº –í–µ–¥—É—â–∏–π –≥–µ–æ–º–µ—Ö–∞–Ω–∏–∫": "senior_geomechanic",
        "üë®‚Äçüî¨ –ì–ª–∞–≤–Ω—ã–π –≥–µ–æ–º–µ—Ö–∞–Ω–∏–∫": "chief_geomechanic"
    }

    service_key = service_map[message.text]
    await state.set_state(ServiceSelection.waiting_for_hours_count)
    await state.update_data(
        service_key=service_key,
        main_service="geomechanic_hourly"
    )

    specialist_level = "–í–µ–¥—É—â–∏–π –≥–µ–æ–º–µ—Ö–∞–Ω–∏–∫" if service_key == "senior_geomechanic" else "–ì–ª–∞–≤–Ω—ã–π –≥–µ–æ–º–µ—Ö–∞–Ω–∏–∫"

    question_text = f"""
üë®‚Äçüíº <b>{specialist_level}</b>

–û–Ω–ª–∞–π–Ω-–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è, –∞—É–¥–∏—Ç —Ä–∞—Å—á–µ—Ç–æ–≤ –∏–ª–∏ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–∞–∫–µ—Ç ‚Äî 4 —á–∞—Å–∞ –≤ –º–µ—Å—è—Ü

<b>–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤:</b>
‚Ä¢ –ü—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –æ—Ç 10 —á–∞—Å–æ–≤ - —Å–∫–∏–¥–∫–∞ 10%
    """

    await message.answer(
        question_text,
        reply_markup=get_back_keyboard(),
        parse_mode='HTML'
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º "–æ—Ç ..."
@router.message(F.text == "üî∫ –ü—Ä–∏–∑–º–µ–Ω–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")
async def service_prism_monitoring(message: Message, state: FSMContext):
    """–ü—Ä–∏–∑–º–µ–Ω–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"""
    await process_direct_service(message, state, "prism_monitoring",
                                 "–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö —Ç–∞—Ö–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏—Ö –Ω–∞–±–ª—é–¥–µ–Ω–∏–π –∑–∞ —Å–º–µ—â–µ–Ω–∏—è–º–∏ –ø—Ä–∏–∑–º",
                                 "–æ—Ç 150,000 ‚ÇΩ")


@router.message(F.text == "üì° –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä–∞–¥–∞—Ä–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
async def service_georadar_interpretation(message: Message, state: FSMContext):
    """–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä–∞–¥–∞—Ä–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    await process_direct_service(message, state, "georadar_interpretation",
                                 "–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–¥–∞—Ä–Ω—ã—Ö —Å–∏—Å—Ç–µ–º (IDS/GroundProbe)",
                                 "–æ—Ç 400,000 ‚ÇΩ")


@router.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ—Ä–æ–≥–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ TARP")
async def service_tarps_setup(message: Message, state: FSMContext):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ—Ä–æ–≥–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ TARP"""
    await process_direct_service(message, state, "tarps_setup",
                                 "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω–µ–π —Ç—Ä–µ–≤–æ–≥–∏, –∫–∞–ª–∏–±—Ä–æ–≤–∫–∞ —Å–∫–æ—Ä–æ—Å—Ç–µ–π —Å–º–µ—â–µ–Ω–∏–π",
                                 "–æ—Ç 500,000 ‚ÇΩ")


@router.message(F.text == "üìã –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ TARP")
async def service_tarps_development(message: Message, state: FSMContext):
    """–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ TARP"""
    await process_direct_service(message, state, "tarps_development",
                                 "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–æ–ª–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ –¥–µ–π—Å—Ç–≤–∏–π –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –ø–æ—Ä–æ–≥–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π",
                                 "–æ—Ç 650,000 ‚ÇΩ")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≥–∏–¥—Ä–æ–≥–µ–æ–ª–æ–≥–∏–∏ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º "–æ—Ç ..."
@router.message(F.text == "üåä –ì–∏–¥—Ä–æ–≥–µ–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —É—á–∞—Å—Ç–∫–∞")
async def service_hydro_survey(message: Message, state: FSMContext):
    """–ì–∏–¥—Ä–æ–≥–µ–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —É—á–∞—Å—Ç–∫–∞"""
    await process_direct_service(message, state, "hydro_survey",
                                 "–°–±–æ—Ä –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –≤–∏–∑—É–∞–ª—å–Ω—ã–π –æ—Å–º–æ—Ç—Ä, –æ–ø–∏—Å–∞–Ω–∏–µ –≤–æ–¥–æ–ø—Ä–æ—è–≤–ª–µ–Ω–∏–π",
                                 "–æ—Ç 120,000 ‚ÇΩ")


@router.message(F.text == "üìä –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å–Ω—ã—Ö —Å–∫–≤–∞–∂–∏–Ω")
async def service_well_interpretation(message: Message, state: FSMContext):
    """–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å–Ω—ã—Ö —Å–∫–≤–∞–∂–∏–Ω"""
    await process_direct_service(message, state, "well_interpretation",
                                 "–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ —É—Ä–æ–≤–Ω—è–º –∏ –¥–µ–±–∏—Ç–∞–º, –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤",
                                 "–æ—Ç 100,000 ‚ÇΩ")


@router.message(F.text == "üíª –ú–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞")
async def service_filtration_modeling(message: Message, state: FSMContext):
    """–ú–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞"""
    await process_direct_service(message, state, "filtration_modeling",
                                 "–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —á–∏—Å–ª–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ –ø–æ–¥–∑–µ–º–Ω—ã—Ö –≤–æ–¥ (MODFLOW, FEFLOW)",
                                 "–æ—Ç 250,000 ‚ÇΩ")


@router.message(F.text == "üîß –†–∞—Å—á–µ—Ç –¥–µ–ø—Ä–µ—Å—Å–∏–∏ –∏ –ø—Ä–æ–µ–∫—Ç –¥—Ä–µ–Ω–∞–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã")
async def service_drainage_calculation(message: Message, state: FSMContext):
    """–†–∞—Å—á–µ—Ç –¥–µ–ø—Ä–µ—Å—Å–∏–∏ –∏ –ø—Ä–æ–µ–∫—Ç –¥—Ä–µ–Ω–∞–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    await process_direct_service(message, state, "drainage_calculation",
                                 "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è –≤–æ–¥–æ–ø–æ–Ω–∏–∑–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–∫–≤–∞–∂–∏–Ω",
                                 "–æ—Ç 200,000 ‚ÇΩ")


@router.message(F.text == "üìà –ì–∏–¥—Ä–æ–≥–µ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")
async def service_hydro_monitoring(message: Message, state: FSMContext):
    """–ì–∏–¥—Ä–æ–≥–µ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"""
    await process_direct_service(message, state, "hydro_monitoring",
                                 "–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–µ—Ç–∏ –Ω–∞–±–ª—é–¥–µ–Ω–∏–π, –∫–æ–Ω—Ç—Ä–æ–ª—å —É—Ä–æ–≤–Ω–µ–π –ø–æ–¥–∑–µ–º–Ω—ã—Ö –≤–æ–¥",
                                 "–æ—Ç 150,000 ‚ÇΩ")


@router.message(F.text == "‚öñÔ∏è –û—Ü–µ–Ω–∫–∞ –≤–ª–∏—è–Ω–∏—è –ø–æ–¥–∑–µ–º–Ω—ã—Ö –≤–æ–¥ –Ω–∞ —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å")
async def service_water_impact_assessment(message: Message, state: FSMContext):
    """–û—Ü–µ–Ω–∫–∞ –≤–ª–∏—è–Ω–∏—è –ø–æ–¥–∑–µ–º–Ω—ã—Ö –≤–æ–¥ –Ω–∞ —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å"""
    await process_direct_service(message, state, "water_impact_assessment",
                                 "–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏ –º–µ—Ö–∞–Ω–∏—á–µ—Å–∫–æ–π —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏",
                                 "–æ—Ç 180,000 ‚ÇΩ")


async def process_direct_service(message: Message, state: FSMContext, service_key: str, description: str, price_text: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ª—É–≥ —Å –ø—Ä—è–º–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç—å—é (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º '–æ—Ç ...')"""
    price = SERVICE_BASE_PRICES.get(service_key, 0)

    user_data = await state.get_data()

    user_info = {
        'username': message.from_user.username,
        'first_name': message.from_user.first_name,
        'last_name': message.from_user.last_name
    }

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å—á–µ—Ç
    await save_calculation(
        user_id=message.from_user.id,
        service_type=service_key,
        parameters={'description': description},
        result=f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {price_text}",
        price=price,
        **user_info
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–∏–¥
    await save_lead(
        user_id=message.from_user.id,
        service_type=service_key,
        calculated_price=price,
        **user_info
    )

    await save_user_event(
        user_id=message.from_user.id,
        event_type='service_inquiry',
        event_data={
            'main_service': user_data.get('main_service'),
            'final_service': service_key,
            'price_indication': price_text
        },
        **user_info
    )

    service_names = {
        "prism_monitoring": "üî∫ –ü—Ä–∏–∑–º–µ–Ω–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥",
        "georadar_interpretation": "üì° –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä–∞–¥–∞—Ä–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞",
        "tarps_setup": "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ—Ä–æ–≥–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ TARP",
        "tarps_development": "üìã –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ TARP",
        "hydro_survey": "üåä –ì–∏–¥—Ä–æ–≥–µ–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —É—á–∞—Å—Ç–∫–∞",
        "well_interpretation": "üìä –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å–Ω—ã—Ö —Å–∫–≤–∞–∂–∏–Ω",
        "filtration_modeling": "üíª –ú–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞",
        "drainage_calculation": "üîß –†–∞—Å—á–µ—Ç –¥–µ–ø—Ä–µ—Å—Å–∏–∏ –∏ –ø—Ä–æ–µ–∫—Ç –¥—Ä–µ–Ω–∞–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã",
        "hydro_monitoring": "üìà –ì–∏–¥—Ä–æ–≥–µ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥",
        "water_impact_assessment": "‚öñÔ∏è –û—Ü–µ–Ω–∫–∞ –≤–ª–∏—è–Ω–∏—è –ø–æ–¥–∑–µ–º–Ω—ã—Ö –≤–æ–¥ –Ω–∞ —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å"
    }

    service_text = f"""
{service_names.get(service_key, "–£—Å–ª—É–≥–∞")}

{description}

<b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {price_text}

–•–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –∏ —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞?
    """

    await state.set_state(Calculation.showing_price)
    await state.update_data(
        final_service=service_key,
        calculated_price=price
    )

    await message.answer(
        service_text,
        reply_markup=get_contact_keyboard(),
        parse_mode='HTML'
    )


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–∞—Å—á–µ—Ç–æ–≤ —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏
@router.message(ServiceSelection.waiting_for_calculations_count, F.text)
async def process_calculations_count(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–∞—Å—á–µ—Ç–æ–≤ —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏ - –ø–æ—Ç–æ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å"""
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await state.set_state(ServiceSelection.waiting_for_subservice)
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å—á–µ—Ç–∞:",
            reply_markup=get_stability_keyboard()
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ —á–∏—Å–ª–æ
    if not message.text.isdigit():
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—Å—á–µ—Ç–æ–≤:",
            reply_markup=get_back_keyboard()
        )
        return

    calculations_count = int(message.text)

    if calculations_count <= 0:
        await message.answer(
            "‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—Å—á–µ—Ç–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0:",
            reply_markup=get_back_keyboard()
        )
        return

    user_data = await state.get_data()
    service_key = user_data.get('service_key')

    if not service_key:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return

    base_price = SERVICE_BASE_PRICES.get(service_key, 0)

    if base_price == 0:
        await message.answer("‚ùå –£—Å–ª—É–≥–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        return

    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–∫–∏–¥–∫–∏
    discount = 0
    if calculations_count >= 10:
        discount = 20
    elif calculations_count >= 5:
        discount = 10

    total_price = base_price * calculations_count
    final_price = total_price * (100 - discount) / 100

    user_info = {
        'username': message.from_user.username,
        'first_name': message.from_user.first_name,
        'last_name': message.from_user.last_name
    }

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å—á–µ—Ç
    await save_calculation(
        user_id=message.from_user.id,
        service_type=service_key,
        parameters={'calculations_count': calculations_count},
        result=f"–†–∞—Å—Å—á–∏—Ç–∞–Ω–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å: {final_price:,.0f} ‚ÇΩ ({calculations_count} —Ä–∞—Å—á–µ—Ç–æ–≤, —Å–∫–∏–¥–∫–∞ {discount}%)",
        price=final_price,
        **user_info
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–∏–¥
    await save_lead(
        user_id=message.from_user.id,
        service_type=service_key,
        calculated_price=final_price,
        **user_info
    )

    await save_user_event(
        user_id=message.from_user.id,
        event_type='final_service_select',
        event_data={
            'main_service': user_data.get('main_service'),
            'final_service': service_key,
            'calculations_count': calculations_count,
            'discount': discount,
            'calculated_price': final_price
        },
        **user_info
    )

    service_names = {
        "2d_ogr": "2D –û–ì–† (–æ—Ç–∫—Ä—ã—Ç—ã–µ –≥–æ—Ä–Ω—ã–µ —Ä–∞–±–æ—Ç—ã)",
        "2d_pgr": "2D –ü–ì–† (–ø–æ–¥–∑–µ–º–Ω—ã–µ –≥–æ—Ä–Ω—ã–µ —Ä–∞–±–æ—Ç—ã)",
        "3d_ogr": "3D –û–ì–† (–æ—Ç–∫—Ä—ã—Ç—ã–µ –≥–æ—Ä–Ω—ã–µ —Ä–∞–±–æ—Ç—ã)",
        "3d_pgr": "3D –ü–ì–† (–ø–æ–¥–∑–µ–º–Ω—ã–µ –≥–æ—Ä–Ω—ã–µ —Ä–∞–±–æ—Ç—ã)"
    }

    service_text = f"""
{service_names.get(service_key, "–†–∞—Å—á–µ—Ç —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏")}

<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—Å—á–µ—Ç–æ–≤:</b> {calculations_count}
<b>–°–∫–∏–¥–∫–∞:</b> {discount}%

<b>–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:</b> {final_price:,.0f} ‚ÇΩ

–•–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏?
    """

    await state.set_state(Calculation.showing_price)
    await state.update_data(
        final_service=service_key,
        calculated_price=final_price
    )

    await message.answer(
        service_text,
        reply_markup=get_contact_keyboard(),
        parse_mode='HTML'
    )


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —á–∞—Å–æ–≤ –≥–µ–æ–º–µ—Ö–∞–Ω–∏–∫–∞
@router.message(ServiceSelection.waiting_for_hours_count, F.text)
async def process_hours_count(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —á–∞—Å–æ–≤ –¥–ª—è –≥–µ–æ–º–µ—Ö–∞–Ω–∏–∫–∞ - –ø–æ—Ç–æ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å"""
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await state.set_state(ServiceSelection.waiting_for_subservice)
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞:",
            reply_markup=get_geomechanic_keyboard()
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ —á–∏—Å–ª–æ
    if not re.match(r'^\d+$', message.text):
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ):",
            reply_markup=get_back_keyboard()
        )
        return

    hours_count = int(message.text)

    # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–∞–∫–µ—Ç - 4 —á–∞—Å–∞
    if hours_count < 4:
        await message.answer(
            "‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–∞–∫–µ—Ç - 4 —á–∞—Å–∞. –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤:",
            reply_markup=get_back_keyboard()
        )
        return

    user_data = await state.get_data()
    service_key = user_data.get('service_key')

    if not service_key:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return

    base_hourly_rate = SERVICE_BASE_PRICES.get(service_key, 0)

    if base_hourly_rate == 0:
        await message.answer("‚ùå –£—Å–ª—É–≥–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        return

    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–∫–∏–¥–∫—É –ø—Ä–∏ –±–æ–ª—å—à–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —á–∞—Å–æ–≤
    discount = 10 if hours_count >= 10 else 0

    total_price = base_hourly_rate * hours_count
    final_price = total_price * (100 - discount) / 100

    user_info = {
        'username': message.from_user.username,
        'first_name': message.from_user.first_name,
        'last_name': message.from_user.last_name
    }

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å—á–µ—Ç
    await save_calculation(
        user_id=message.from_user.id,
        service_type=service_key,
        parameters={'hours_count': hours_count},
        result=f"–†–∞—Å—Å—á–∏—Ç–∞–Ω–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å: {final_price:,.0f} ‚ÇΩ ({hours_count} —á–∞—Å–æ–≤, —Å—Ç–∞–≤–∫–∞ {base_hourly_rate:,.0f} ‚ÇΩ/—á–∞—Å, —Å–∫–∏–¥–∫–∞ {discount}%)",
        price=final_price,
        **user_info
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–∏–¥
    await save_lead(
        user_id=message.from_user.id,
        service_type=service_key,
        calculated_price=final_price,
        **user_info
    )

    await save_user_event(
        user_id=message.from_user.id,
        event_type='final_service_select',
        event_data={
            'main_service': user_data.get('main_service'),
            'final_service': service_key,
            'hours_count': hours_count,
            'discount': discount,
            'calculated_price': final_price
        },
        **user_info
    )

    specialist_level = "–í–µ–¥—É—â–∏–π –≥–µ–æ–º–µ—Ö–∞–Ω–∏–∫" if service_key == "senior_geomechanic" else "–ì–ª–∞–≤–Ω—ã–π –≥–µ–æ–º–µ—Ö–∞–Ω–∏–∫"

    service_text = f"""
üë®‚Äçüíº <b>{specialist_level}</b>

<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤:</b> {hours_count}
<b>–°—Ç–∞–≤–∫–∞:</b> {base_hourly_rate:,.0f} ‚ÇΩ/—á–∞—Å
<b>–°–∫–∏–¥–∫–∞:</b> {discount}%

<b>–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:</b> {final_price:,.0f} ‚ÇΩ

–•–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏?
    """

    await state.set_state(Calculation.showing_price)
    await state.update_data(
        final_service=service_key,
        calculated_price=final_price
    )

    await message.answer(
        service_text,
        reply_markup=get_contact_keyboard(),
        parse_mode='HTML'
    )