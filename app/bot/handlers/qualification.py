from aiogram import Router, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
import re

from app.bot.keyboards.main_menu import (
    get_main_menu_keyboard, get_geodata_keyboard, get_stability_keyboard,
    get_monitoring_keyboard, get_hydrogeology_keyboard, get_geomechanic_keyboard,
    get_contact_keyboard, get_yes_no_keyboard, get_back_keyboard
)
from app.bot.states import ContactCollection, ServiceSelection, Calculation
from apps.bot_data.bot_utils import save_user_event, save_calculation, save_lead

router = Router()

# –ë–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥
SERVICE_BASE_PRICES = {
    # –°–±–æ—Ä –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    "program_development": 300000,
    "core_documentation": 200000,

    # –†–∞—Å—á–µ—Ç—ã —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏
    "2d_ogr": 60000,
    "2d_pgr": 80000,
    "3d_ogr": 150000,
    "3d_pgr": 180000,

    # –ì–µ–æ–º–µ—Ö–∞–Ω–∏–∫ –Ω–∞ —á–∞—Å
    "senior_geomechanic": 6000,
    "chief_geomechanic": 12000,

    # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    "prism_monitoring": 150000,
    "georadar_interpretation": 400000,  # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ 400 000
    "tarps_setup": 500000,
    "tarps_development": 650000,

    # –ì–∏–¥—Ä–æ–≥–µ–æ–ª–æ–≥–∏—è
    "hydro_survey": 120000,
    "well_interpretation": 100000,
    "filtration_modeling": 250000,
    "drainage_calculation": 200000,
    "hydro_monitoring": 150000,
    "water_impact_assessment": 180000,
}


@router.message(F.text == "üöÄ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å")
async def start_calculation(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ - –ø–æ–∫–∞–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —É—Å–ª—É–≥"""
    await save_user_event(
        user_id=message.from_user.id,
        event_type='calculation_started',
        event_data={},
        username=message.from_user.username,
        first_name=message.from_user.first_name,
        last_name=message.from_user.last_name
    )

    await message.answer(
        "üìã –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —É—Å–ª—É–≥–∏:",
        reply_markup=get_main_menu_keyboard()
    )


@router.message(F.text == "üìä –°–±–æ—Ä –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
async def service_geodata(message: Message, state: FSMContext):
    """–£—Å–ª—É–≥–∞: –°–±–æ—Ä –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    await state.set_state(ServiceSelection.waiting_for_subservice)
    await state.update_data(main_service="geodata_collection")

    await save_user_event(
        user_id=message.from_user.id,
        event_type='service_select',
        event_data={'service': 'geodata_collection'},
        username=message.from_user.username,
        first_name=message.from_user.first_name,
        last_name=message.from_user.last_name
    )

    service_text = """
üìä –°–±–æ—Ä –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö

–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —É—Å–ª—É–≥—É:
    """

    await message.answer(
        service_text,
        reply_markup=get_geodata_keyboard()
    )


@router.message(F.text == "üìê –†–∞—Å—á—ë—Ç —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏")
async def service_stability(message: Message, state: FSMContext):
    """–£—Å–ª—É–≥–∞: –†–∞—Å—á–µ—Ç —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏"""
    await state.set_state(ServiceSelection.waiting_for_subservice)
    await state.update_data(main_service="stability_calculation")

    await save_user_event(
        user_id=message.from_user.id,
        event_type='service_select',
        event_data={'service': 'stability_calculation'},
        username=message.from_user.username,
        first_name=message.from_user.first_name,
        last_name=message.from_user.last_name
    )

    service_text = """
üìê –†–∞—Å—á–µ—Ç —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å—á–µ—Ç–∞:
    """

    await message.answer(
        service_text,
        reply_markup=get_stability_keyboard()
    )


@router.message(F.text == "üë®‚Äçüíº –ì–µ–æ–º–µ—Ö–∞–Ω–∏–∫ –Ω–∞ —á–∞—Å")
async def service_geomechanic(message: Message, state: FSMContext):
    """–£—Å–ª—É–≥–∞: –ì–µ–æ–º–µ—Ö–∞–Ω–∏–∫ –Ω–∞ —á–∞—Å"""
    await state.set_state(ServiceSelection.waiting_for_subservice)
    await state.update_data(main_service="geomechanic_hourly")

    await save_user_event(
        user_id=message.from_user.id,
        event_type='service_select',
        event_data={'service': 'geomechanic_hourly'},
        username=message.from_user.username,
        first_name=message.from_user.first_name,
        last_name=message.from_user.last_name
    )

    service_text = """
üë®‚Äçüíº –ì–µ–æ–º–µ—Ö–∞–Ω–∏–∫ –Ω–∞ —á–∞—Å

–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–æ–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏:
‚Ä¢ –û–Ω–ª–∞–π–Ω-–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è
‚Ä¢ –ê—É–¥–∏—Ç —Ä–∞—Å—á–µ—Ç–æ–≤  
‚Ä¢ –°–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞

–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–∞–∫–µ—Ç ‚Äî 4 —á–∞—Å–∞ –≤ –º–µ—Å—è—Ü
–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞:
    """

    await message.answer(
        service_text,
        reply_markup=get_geomechanic_keyboard()
    )


@router.message(F.text == "üì° –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")
async def service_monitoring(message: Message, state: FSMContext):
    """–£—Å–ª—É–≥–∞: –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"""
    await state.set_state(ServiceSelection.waiting_for_subservice)
    await state.update_data(main_service="monitoring")

    await save_user_event(
        user_id=message.from_user.id,
        event_type='service_select',
        event_data={'service': 'monitoring'},
        username=message.from_user.username,
        first_name=message.from_user.first_name,
        last_name=message.from_user.last_name
    )

    service_text = """
üì° –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:
    """

    await message.answer(
        service_text,
        reply_markup=get_monitoring_keyboard()
    )


@router.message(F.text == "üíß –ì–∏–¥—Ä–æ–≥–µ–æ–ª–æ–≥–∏—è")
async def service_hydrogeology(message: Message, state: FSMContext):
    """–£—Å–ª—É–≥–∞: –ì–∏–¥—Ä–æ–≥–µ–æ–ª–æ–≥–∏—è"""
    await state.set_state(ServiceSelection.waiting_for_subservice)
    await state.update_data(main_service="hydrogeology")

    await save_user_event(
        user_id=message.from_user.id,
        event_type='service_select',
        event_data={'service': 'hydrogeology'},
        username=message.from_user.username,
        first_name=message.from_user.first_name,
        last_name=message.from_user.last_name
    )

    service_text = """
üíß –ì–∏–¥—Ä–æ–≥–µ–æ–ª–æ–≥–∏—è

–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø–æ–¥–∑–µ–º–Ω—ã–º–∏ –≤–æ–¥–∞–º–∏:
    """

    await message.answer(
        service_text,
        reply_markup=get_hydrogeology_keyboard()
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–±–æ—Ä–∞ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
@router.message(F.text == "üìù –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã –≥–µ–æ—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π")
async def service_program_development(message: Message, state: FSMContext):
    """–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã –≥–µ–æ—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π"""
    await state.set_state(ServiceSelection.waiting_for_geotech_wells)
    await state.update_data(
        service_key="program_development",
        main_service="geodata_collection"
    )

    await save_user_event(
        user_id=message.from_user.id,
        event_type='service_select',
        event_data={'service': 'program_development'},
        username=message.from_user.username,
        first_name=message.from_user.first_name,
        last_name=message.from_user.last_name
    )

    question_text = """
üìù –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã –≥–µ–æ—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π

–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã, –¢–ó –∏ –ø–µ—Ä–µ—á–Ω—è –ø–æ–ª–µ–≤—ã—Ö –∏ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã—Ö —Ä–∞–±–æ—Ç.

–î–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã:

–ö–∞–∫–∏–µ –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å—Ç—å?
1. –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ –≥–µ–æ—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º —Å–∫–≤–∞–∂–∏–Ω–∞–º? (–¥–∞/–Ω–µ—Ç)
2. –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ –≥–µ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–º —Å–∫–≤–∞–∂–∏–Ω–∞–º? (–¥–∞/–Ω–µ—Ç)  
3. –ï—Å—Ç—å –ª–∏ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ –§–ú–°? (–¥–∞/–Ω–µ—Ç)

–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å:
–ï—Å—Ç—å –ª–∏ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ –≥–µ–æ—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º —Å–∫–≤–∞–∂–∏–Ω–∞–º?
    """

    await message.answer(
        question_text,
        reply_markup=get_yes_no_keyboard()
    )


@router.message(F.text == "üíé –ì–µ–æ—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–µ—Ä–Ω–∞")
async def service_core_documentation(message: Message, state: FSMContext):
    """–ì–µ–æ—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–µ—Ä–Ω–∞"""
    await state.set_state(ServiceSelection.waiting_for_drilling_rigs)
    await state.update_data(
        service_key="core_documentation",
        main_service="geodata_collection"
    )

    await save_user_event(
        user_id=message.from_user.id,
        event_type='service_select',
        event_data={'service': 'core_documentation'},
        username=message.from_user.username,
        first_name=message.from_user.first_name,
        last_name=message.from_user.last_name
    )

    question_text = """
üíé –ì–µ–æ—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–µ—Ä–Ω–∞

–û–ø–∏—Å–∞–Ω–∏–µ –∫–µ—Ä–Ω–∞, —Ä–∞—Å—á–µ—Ç RQD, –≤—ã–¥–µ–ª–µ–Ω–∏–µ –∑–æ–Ω –Ω–∞—Ä—É—à–µ–Ω–Ω–æ—Å—Ç–∏, —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–æ–≤.

–î–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—É—Ä–æ–≤—ã—Ö —Å—Ç–∞–Ω–∫–æ–≤:
    """

    await message.answer(
        question_text,
        reply_markup=get_back_keyboard()
    )


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –î–ê/–ù–ï–¢ –¥–ª—è –≥–µ–æ—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Å–∫–≤–∞–∂–∏–Ω
@router.message(ServiceSelection.waiting_for_geotech_wells, F.text.in_(["‚úÖ –î–∞", "‚ùå –ù–µ—Ç"]))
async def process_geotech_wells_answer(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ –Ω–∞–ª–∏—á–∏–∏ –±–∞–∑—ã –≥–µ–æ—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Å–∫–≤–∞–∂–∏–Ω"""
    answer = message.text == "‚úÖ –î–∞"

    await state.update_data(geotech_wells=answer)
    await state.set_state(ServiceSelection.waiting_for_geo_wells)

    next_question = """
–û—Ç–ª–∏—á–Ω–æ! –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å:

–ï—Å—Ç—å –ª–∏ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ –≥–µ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–º —Å–∫–≤–∞–∂–∏–Ω–∞–º?
    """

    await message.answer(
        next_question,
        reply_markup=get_yes_no_keyboard()
    )


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –î–ê/–ù–ï–¢ –¥–ª—è –≥–µ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Å–∫–≤–∞–∂–∏–Ω
@router.message(ServiceSelection.waiting_for_geo_wells, F.text.in_(["‚úÖ –î–∞", "‚ùå –ù–µ—Ç"]))
async def process_geo_wells_answer(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ –Ω–∞–ª–∏—á–∏–∏ –±–∞–∑—ã –≥–µ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Å–∫–≤–∞–∂–∏–Ω"""
    answer = message.text == "‚úÖ –î–∞"

    await state.update_data(geo_wells=answer)
    await state.set_state(ServiceSelection.waiting_for_fms_data)

    next_question = """
–û—Ç–ª–∏—á–Ω–æ! –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å:

–ï—Å—Ç—å –ª–∏ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ –§–ú–°?
    """

    await message.answer(
        next_question,
        reply_markup=get_yes_no_keyboard()
    )


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –î–ê/–ù–ï–¢ –¥–ª—è –§–ú–° –∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞
@router.message(ServiceSelection.waiting_for_fms_data, F.text.in_(["‚úÖ –î–∞", "‚ùå –ù–µ—Ç"]))
async def process_fms_answer_and_calculate(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ –Ω–∞–ª–∏—á–∏–∏ –§–ú–° –∏ —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏"""
    answer = message.text == "‚úÖ –î–∞"

    user_data = await state.get_data()
    service_key = user_data.get('service_key', 'program_development')

    # –ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞
    base_price = SERVICE_BASE_PRICES.get(service_key, 300000)

    # –õ–æ–≥–∏–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–≤–µ—Ç–æ–≤
    final_price = base_price

    # –ï—Å–ª–∏ –µ—Å—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ - —Å–∫–∏–¥–∫–∞
    if (user_data.get('geotech_wells') and
        user_data.get('geo_wells') and
        answer):
        final_price = int(base_price * 0.9)  # 10% —Å–∫–∏–¥–∫–∞ –∑–∞ –ø–æ–ª–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Ç –¥–∞–Ω–Ω—ã—Ö
    # –ï—Å–ª–∏ –µ—Å—Ç—å 2 –∏–∑ 3 –¥–∞–Ω–Ω—ã—Ö - –Ω–µ–±–æ–ª—å—à–∞—è —Å–∫–∏–¥–∫–∞
    elif ((user_data.get('geotech_wells') and user_data.get('geo_wells')) or
          (user_data.get('geotech_wells') and answer) or
          (user_data.get('geo_wells') and answer)):
        final_price = int(base_price * 0.95)  # 5% —Å–∫–∏–¥–∫–∞

    user_info = {
        'username': message.from_user.username,
        'first_name': message.from_user.first_name,
        'last_name': message.from_user.last_name
    }

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å—á–µ—Ç
    await save_calculation(
        user_id=message.from_user.id,
        service_type=service_key,
        parameters={
            'geotech_wells': user_data.get('geotech_wells'),
            'geo_wells': user_data.get('geo_wells'),
            'fms_data': answer
        },
        result=f"–†–∞—Å—Å—á–∏—Ç–∞–Ω–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥–∏: {final_price:,} ‚ÇΩ",
        price=final_price,
        **user_info
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–∏–¥
    await save_lead(
        user_id=message.from_user.id,
        service_type=service_key,
        calculated_price=final_price,
        **user_info
    )

    await save_user_event(
        user_id=message.from_user.id,
        event_type='final_service_select',
        event_data={
            'main_service': user_data.get('main_service'),
            'final_service': service_key,
            'calculated_price': final_price,
            'answers': {
                'geotech_wells': user_data.get('geotech_wells'),
                'geo_wells': user_data.get('geo_wells'),
                'fms_data': answer
            }
        },
        **user_info
    )

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –æ—Ç–≤–µ—Ç–∞–º–∏
    answers_text = "–í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã:\n"
    answers_text += f"‚Ä¢ –ì–µ–æ—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å–∫–≤–∞–∂–∏–Ω—ã: {'‚úÖ –î–∞' if user_data.get('geotech_wells') else '‚ùå –ù–µ—Ç'}\n"
    answers_text += f"‚Ä¢ –ì–µ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Å–∫–≤–∞–∂–∏–Ω—ã: {'‚úÖ –î–∞' if user_data.get('geo_wells') else '‚ùå –ù–µ—Ç'}\n"
    answers_text += f"‚Ä¢ –î–∞–Ω–Ω—ã–µ –§–ú–°: {'‚úÖ –î–∞' if answer else '‚ùå –ù–µ—Ç'}"

    service_text = f"""
üìù –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã –≥–µ–æ—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π

{answers_text}

–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: –æ—Ç {final_price:,} ‚ÇΩ

–•–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏?
    """

    await state.set_state(Calculation.showing_price)
    await state.update_data(
        final_service=service_key,
        calculated_price=final_price
    )

    await message.answer(
        service_text,
        reply_markup=get_contact_keyboard()
    )


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±—É—Ä–æ–≤—ã—Ö —Å—Ç–∞–Ω–∫–æ–≤
@router.message(ServiceSelection.waiting_for_drilling_rigs, F.text)
async def process_drilling_rigs_count(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±—É—Ä–æ–≤—ã—Ö —Å—Ç–∞–Ω–∫–æ–≤"""
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await state.set_state(ServiceSelection.waiting_for_subservice)
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:",
            reply_markup=get_geodata_keyboard()
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ —á–∏—Å–ª–æ
    if not message.text.isdigit():
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±—É—Ä–æ–≤—ã—Ö —Å—Ç–∞–Ω–∫–æ–≤:",
            reply_markup=get_back_keyboard()
        )
        return

    rigs_count = int(message.text)

    if rigs_count <= 0:
        await message.answer(
            "‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞–Ω–∫–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0:",
            reply_markup=get_back_keyboard()
        )
        return

    user_data = await state.get_data()
    service_key = user_data.get('service_key', 'core_documentation')

    # –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏: 3 –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ç–æ—Ä–∞ –Ω–∞ —Å—Ç–∞–Ω–æ–∫, –∫–∞–∂–¥—ã–π –ø–æ 300,000 —Ä—É–±/–º–µ—Å
    documentators_per_rig = 3
    cost_per_documentator = 300000
    total_documentators = rigs_count * documentators_per_rig
    final_price = total_documentators * cost_per_documentator

    user_info = {
        'username': message.from_user.username,
        'first_name': message.from_user.first_name,
        'last_name': message.from_user.last_name
    }

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å—á–µ—Ç
    await save_calculation(
        user_id=message.from_user.id,
        service_type=service_key,
        parameters={'rigs_count': rigs_count},
        result=f"–†–∞—Å—Å—á–∏—Ç–∞–Ω–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å: {final_price:,} ‚ÇΩ/–º–µ—Å ({rigs_count} —Å—Ç–∞–Ω–∫–æ–≤ √ó {documentators_per_rig} –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ç–æ—Ä–æ–≤)",
        price=final_price,
        **user_info
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–∏–¥
    await save_lead(
        user_id=message.from_user.id,
        service_type=service_key,
        calculated_price=final_price,
        **user_info
    )

    await save_user_event(
        user_id=message.from_user.id,
        event_type='final_service_select',
        event_data={
            'main_service': user_data.get('main_service'),
            'final_service': service_key,
            'rigs_count': rigs_count,
            'calculated_price': final_price
        },
        **user_info
    )

    service_text = f"""
üíé –ì–µ–æ—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–µ—Ä–Ω–∞

–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞–Ω–∫–æ–≤: {rigs_count}
–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ç–æ—Ä–æ–≤: {total_documentators}

–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: –æ—Ç  {final_price:,} ‚ÇΩ –≤ –º–µ—Å—è—Ü

–•–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏?
    """

    await state.set_state(Calculation.showing_price)
    await state.update_data(
        final_service=service_key,
        calculated_price=final_price
    )

    await message.answer(
        service_text,
        reply_markup=get_contact_keyboard()
    )


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ù–∞–∑–∞–¥ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö –≤–≤–æ–¥–∞
@router.message(
    ServiceSelection.waiting_for_geotech_wells,
    ServiceSelection.waiting_for_geo_wells,
    ServiceSelection.waiting_for_fms_data,
    F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"
)
async def back_from_questions(message: Message, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∏–∑ –≤–æ–ø—Ä–æ—Å–æ–≤ –∫ –≤—ã–±–æ—Ä—É —É—Å–ª—É–≥–∏"""
    await state.set_state(ServiceSelection.waiting_for_subservice)

    user_data = await state.get_data()
    main_service = user_data.get('main_service', 'geodata_collection')

    if main_service == 'geodata_collection':
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:",
            reply_markup=get_geodata_keyboard()
        )
    else:
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:",
            reply_markup=get_main_menu_keyboard()
        )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ –î–ê/–ù–ï–¢
@router.message(
    ServiceSelection.waiting_for_geotech_wells,
    ServiceSelection.waiting_for_geo_wells,
    ServiceSelection.waiting_for_fms_data
)
async def handle_invalid_yes_no_answer(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –î–ê/–ù–ï–¢"""
    await message.answer(
        "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞:",
        reply_markup=get_yes_no_keyboard()
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤ —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏
@router.message(F.text.in_(["2D –û–ì–†", "2D –ü–ì–†", "3D –û–ì–†", "3D –ü–ì–†"]))
async def service_stability_calculation(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–∞—Å—á–µ—Ç–∞ —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏"""
    service_map = {
        "2D –û–ì–†": "2d_ogr",
        "2D –ü–ì–†": "2d_pgr",
        "3D –û–ì–†": "3d_ogr",
        "3D –ü–ì–†": "3d_pgr"
    }

    service_key = service_map[message.text]
    await state.set_state(ServiceSelection.waiting_for_calculations_count)
    await state.update_data(
        service_key=service_key,
        main_service="stability_calculation"
    )

    # –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä
    abbreviations = {
        "2d_ogr": " (–û–ì–† ‚Äì –æ—Ç–∫—Ä—ã—Ç—ã–µ –≥–æ—Ä–Ω—ã–µ —Ä–∞–±–æ—Ç—ã)",
        "2d_pgr": " (–ü–ì–† ‚Äì –ø–æ–¥–∑–µ–º–Ω—ã–µ –≥–æ—Ä–Ω—ã–µ —Ä–∞–±–æ—Ç—ã)",
        "3d_ogr": " (–û–ì–† ‚Äì –æ—Ç–∫—Ä—ã—Ç—ã–µ –≥–æ—Ä–Ω—ã–µ —Ä–∞–±–æ—Ç—ã)",
        "3d_pgr": " (–ü–ì–† ‚Äì –ø–æ–¥–∑–µ–º–Ω—ã–µ –≥–æ—Ä–Ω—ã–µ —Ä–∞–±–æ—Ç—ã)"
    }

    descriptions = {
        "2d_ogr": "2D —Ä–∞—Å—á–µ—Ç —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏ –æ—Ç–∫–æ—Å–æ–≤ –∏ —É—Å—Ç—É–ø–æ–≤ (Slide, RS2)",
        "2d_pgr": "2D –∞–Ω–∞–ª–∏–∑ —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏ –ø–æ–¥–∑–µ–º–Ω—ã—Ö –∫–∞–º–µ—Ä, —à—Ç—Ä–µ–∫–æ–≤ –∏ —Ü–µ–ª–∏–∫–æ–≤",
        "3d_ogr": "3D –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏ –æ—Ç–∫–æ—Å–æ–≤ –∏ —É—Å—Ç—É–ø–æ–≤ (RS3)",
        "3d_pgr": "3D-–∞–Ω–∞–ª–∏–∑ –Ω–∞–ø—Ä—è–∂–µ–Ω–Ω–æ-–¥–µ—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–∞—Å—Å–∏–≤–∞"
    }

    question_text = f"""
{message.text}{abbreviations.get(service_key, "")}

{descriptions[service_key]}

–î–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—Å—á–µ—Ç–æ–≤:
‚Ä¢ –û—Ç 5 —Ä–∞—Å—á–µ—Ç–æ–≤ - —Å–∫–∏–¥–∫–∞ 10%
‚Ä¢ –û—Ç 10 —Ä–∞—Å—á–µ—Ç–æ–≤ - —Å–∫–∏–¥–∫–∞ 20%
    """

    await message.answer(
        question_text,
        reply_markup=get_back_keyboard()
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≥–µ–æ–º–µ—Ö–∞–Ω–∏–∫–∞ –Ω–∞ —á–∞—Å
@router.message(F.text.in_(["üë®‚Äçüíº –í–µ–¥—É—â–∏–π –≥–µ–æ–º–µ—Ö–∞–Ω–∏–∫", "üë®‚Äçüî¨ –ì–ª–∞–≤–Ω—ã–π –≥–µ–æ–º–µ—Ö–∞–Ω–∏–∫"]))
async def service_geomechanic_level(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è –≥–µ–æ–º–µ—Ö–∞–Ω–∏–∫–∞"""
    service_map = {
        "üë®‚Äçüíº –í–µ–¥—É—â–∏–π –≥–µ–æ–º–µ—Ö–∞–Ω–∏–∫": "senior_geomechanic",
        "üë®‚Äçüî¨ –ì–ª–∞–≤–Ω—ã–π –≥–µ–æ–º–µ—Ö–∞–Ω–∏–∫": "chief_geomechanic"
    }

    service_key = service_map[message.text]
    await state.set_state(ServiceSelection.waiting_for_hours_count)
    await state.update_data(
        service_key=service_key,
        main_service="geomechanic_hourly"
    )

    question_text = f"""
{message.text}

–û–Ω–ª–∞–π–Ω-–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è, –∞—É–¥–∏—Ç —Ä–∞—Å—á–µ—Ç–æ–≤ –∏–ª–∏ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–∞–∫–µ—Ç ‚Äî 4 —á–∞—Å–∞ –≤ –º–µ—Å—è—Ü

‚Ä¢ –ü—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –æ—Ç 10 —á–∞—Å–æ–≤ - —Å–∫–∏–¥–∫–∞ 10%

–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤:
    """

    await message.answer(
        question_text,
        reply_markup=get_back_keyboard()
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
@router.message(F.text == "üî∫ –ü—Ä–∏–∑–º–µ–Ω–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")
async def service_prism_monitoring(message: Message, state: FSMContext):
    """–ü—Ä–∏–∑–º–µ–Ω–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"""
    await process_direct_service(message, state, "prism_monitoring",
                                 "–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö —Ç–∞—Ö–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏—Ö –Ω–∞–±–ª—é–¥–µ–Ω–∏–π –∑–∞ —Å–º–µ—â–µ–Ω–∏—è–º–∏ –ø—Ä–∏–∑–º")


@router.message(F.text == "üì° –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –≥–µ–æ—Ä–∞–¥–∞—Ä–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
async def service_georadar_interpretation(message: Message, state: FSMContext):
    """–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –≥–µ–æ—Ä–∞–¥–∞—Ä–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    await process_direct_service(message, state, "georadar_interpretation",
                                 "–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–¥–∞—Ä–Ω—ã—Ö —Å–∏—Å—Ç–µ–º (IDS/GroundProbe)")


@router.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ—Ä–æ–≥–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ TARP")
async def service_tarps_setup(message: Message, state: FSMContext):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ—Ä–æ–≥–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ TARP"""
    await process_direct_service(message, state, "tarps_setup",
                                 "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω–µ–π —Ç—Ä–µ–≤–æ–≥–∏, –∫–∞–ª–∏–±—Ä–æ–≤–∫–∞ —Å–∫–æ—Ä–æ—Å—Ç–µ–π —Å–º–µ—â–µ–Ω–∏–π")


@router.message(F.text == "üìã –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ TARP")
async def service_tarps_development(message: Message, state: FSMContext):
    """–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ TARP"""
    await process_direct_service(message, state, "tarps_development",
                                 "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–æ–ª–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ –¥–µ–π—Å—Ç–≤–∏–π –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –ø–æ—Ä–æ–≥–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≥–∏–¥—Ä–æ–≥–µ–æ–ª–æ–≥–∏–∏
@router.message(F.text == "üåä –ì–∏–¥—Ä–æ–≥–µ–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —É—á–∞—Å—Ç–∫–∞")
async def service_hydro_survey(message: Message, state: FSMContext):
    """–ì–∏–¥—Ä–æ–≥–µ–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —É—á–∞—Å—Ç–∫–∞"""
    await process_direct_service(message, state, "hydro_survey",
                                 "–°–±–æ—Ä –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –≤–∏–∑—É–∞–ª—å–Ω—ã–π –æ—Å–º–æ—Ç—Ä, –æ–ø–∏—Å–∞–Ω–∏–µ –≤–æ–¥–æ–ø—Ä–æ—è–≤–ª–µ–Ω–∏–π")


@router.message(F.text == "üìä –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å–Ω—ã—Ö —Å–∫–≤–∞–∂–∏–Ω")
async def service_well_interpretation(message: Message, state: FSMContext):
    """–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å–Ω—ã—Ö —Å–∫–≤–∞–∂–∏–Ω"""
    await process_direct_service(message, state, "well_interpretation",
                                 "–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ —É—Ä–æ–≤–Ω—è–º –∏ –¥–µ–±–∏—Ç–∞–º, –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤")


@router.message(F.text == "üíª –ú–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞")
async def service_filtration_modeling(message: Message, state: FSMContext):
    """–ú–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞"""
    await process_direct_service(message, state, "filtration_modeling",
                                 "–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —á–∏—Å–ª–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ –ø–æ–¥–∑–µ–º–Ω—ã—Ö –≤–æ–¥ (MODFLOW, FEFLOW)")


@router.message(F.text == "üîß –†–∞—Å—á–µ—Ç –¥–µ–ø—Ä–µ—Å—Å–∏–∏ –∏ –ø—Ä–æ–µ–∫—Ç –¥—Ä–µ–Ω–∞–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã")
async def service_drainage_calculation(message: Message, state: FSMContext):
    """–†–∞—Å—á–µ—Ç –¥–µ–ø—Ä–µ—Å—Å–∏–∏ –∏ –ø—Ä–æ–µ–∫—Ç –¥—Ä–µ–Ω–∞–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    await process_direct_service(message, state, "drainage_calculation",
                                 "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è –≤–æ–¥–æ–ø–æ–Ω–∏–∑–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–∫–≤–∞–∂–∏–Ω")


@router.message(F.text == "üìà –ì–∏–¥—Ä–æ–≥–µ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")
async def service_hydro_monitoring(message: Message, state: FSMContext):
    """–ì–∏–¥—Ä–æ–≥–µ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"""
    await process_direct_service(message, state, "hydro_monitoring",
                                 "–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–µ—Ç–∏ –Ω–∞–±–ª—é–¥–µ–Ω–∏–π, –∫–æ–Ω—Ç—Ä–æ–ª—å —É—Ä–æ–≤–Ω–µ–π –ø–æ–¥–∑–µ–º–Ω—ã—Ö –≤–æ–¥")


@router.message(F.text == "‚öñÔ∏è –û—Ü–µ–Ω–∫–∞ –≤–ª–∏—è–Ω–∏—è –ø–æ–¥–∑–µ–º–Ω—ã—Ö –≤–æ–¥ –Ω–∞ —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å")
async def service_water_impact_assessment(message: Message, state: FSMContext):
    """–û—Ü–µ–Ω–∫–∞ –≤–ª–∏—è–Ω–∏—è –ø–æ–¥–∑–µ–º–Ω—ã—Ö –≤–æ–¥ –Ω–∞ —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å"""
    await process_direct_service(message, state, "water_impact_assessment",
                                 "–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏ –º–µ—Ö–∞–Ω–∏—á–µ—Å–∫–æ–π —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏")


async def process_direct_service(message: Message, state: FSMContext, service_key: str, description: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ª—É–≥ —Å –ø—Ä—è–º–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç—å—é"""
    price = SERVICE_BASE_PRICES.get(service_key, 0)

    if price == 0:
        await message.answer("‚ùå –£—Å–ª—É–≥–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        return

    user_data = await state.get_data()

    user_info = {
        'username': message.from_user.username,
        'first_name': message.from_user.first_name,
        'last_name': message.from_user.last_name
    }

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å—á–µ—Ç
    await save_calculation(
        user_id=message.from_user.id,
        service_type=service_key,
        parameters={'description': description},
        result=f"–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ—Ç: {price:,} ‚ÇΩ",
        price=price,
        **user_info
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–∏–¥
    await save_lead(
        user_id=message.from_user.id,
        service_type=service_key,
        calculated_price=price,
        **user_info
    )

    await save_user_event(
        user_id=message.from_user.id,
        event_type='final_service_select',
        event_data={
            'main_service': user_data.get('main_service'),
            'final_service': service_key,
            'calculated_price': price
        },
        **user_info
    )

    service_names = {
        "prism_monitoring": "üî∫ –ü—Ä–∏–∑–º–µ–Ω–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥",
        "georadar_interpretation": "üì° –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –≥–µ–æ—Ä–∞–¥–∞—Ä–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞",
        "tarps_setup": "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ—Ä–æ–≥–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ TARP",
        "tarps_development": "üìã –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ TARP",
        "hydro_survey": "üåä –ì–∏–¥—Ä–æ–≥–µ–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —É—á–∞—Å—Ç–∫–∞",
        "well_interpretation": "üìä –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å–Ω—ã—Ö —Å–∫–≤–∞–∂–∏–Ω",
        "filtration_modeling": "üíª –ú–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞",
        "drainage_calculation": "üîß –†–∞—Å—á–µ—Ç –¥–µ–ø—Ä–µ—Å—Å–∏–∏ –∏ –ø—Ä–æ–µ–∫—Ç –¥—Ä–µ–Ω–∞–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã",
        "hydro_monitoring": "üìà –ì–∏–¥—Ä–æ–≥–µ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥",
        "water_impact_assessment": "‚öñÔ∏è –û—Ü–µ–Ω–∫–∞ –≤–ª–∏—è–Ω–∏—è –ø–æ–¥–∑–µ–º–Ω—ã—Ö –≤–æ–¥ –Ω–∞ —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å"
    }

    # –î–ª—è —É—Å–ª—É–≥ –≥–∏–¥—Ä–æ–≥–µ–æ–ª–æ–≥–∏–∏ –∏ TARP –∏—Å–ø–æ–ª—å–∑—É–µ–º "–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: –æ—Ç"
    service_text = f"""
{service_names.get(service_key, "–£—Å–ª—É–≥–∞")}

{description}

–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: –æ—Ç {price:,} ‚ÇΩ

–•–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –∏ —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞?
    """

    await state.set_state(Calculation.showing_price)
    await state.update_data(
        final_service=service_key,
        calculated_price=price
    )

    await message.answer(
        service_text,
        reply_markup=get_contact_keyboard()
    )


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —á–∞—Å–æ–≤ –≥–µ–æ–º–µ—Ö–∞–Ω–∏–∫–∞
@router.message(ServiceSelection.waiting_for_hours_count, F.text)
async def process_hours_count(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —á–∞—Å–æ–≤ –¥–ª—è –≥–µ–æ–º–µ—Ö–∞–Ω–∏–∫–∞"""
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await state.set_state(ServiceSelection.waiting_for_subservice)
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞:",
            reply_markup=get_geomechanic_keyboard()
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ —á–∏—Å–ª–æ
    if not re.match(r'^\d+$', message.text):
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ):",
            reply_markup=get_back_keyboard()
        )
        return

    hours_count = int(message.text)

    # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–∞–∫–µ—Ç - 4 —á–∞—Å–∞
    if hours_count < 4:
        await message.answer(
            "‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–∞–∫–µ—Ç - 4 —á–∞—Å–∞. –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤:",
            reply_markup=get_back_keyboard()
        )
        return

    user_data = await state.get_data()
    service_key = user_data.get('service_key')

    if not service_key:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return

    base_hourly_rate = SERVICE_BASE_PRICES.get(service_key, 0)

    if base_hourly_rate == 0:
        await message.answer("‚ùå –£—Å–ª—É–≥–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        return

    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–∫–∏–¥–∫—É –ø—Ä–∏ –±–æ–ª—å—à–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —á–∞—Å–æ–≤
    discount = 10 if hours_count >= 10 else 0

    total_price = base_hourly_rate * hours_count
    final_price = total_price * (100 - discount) / 100

    user_info = {
        'username': message.from_user.username,
        'first_name': message.from_user.first_name,
        'last_name': message.from_user.last_name
    }

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å—á–µ—Ç
    await save_calculation(
        user_id=message.from_user.id,
        service_type=service_key,
        parameters={'hours_count': hours_count},
        result=f"–†–∞—Å—Å—á–∏—Ç–∞–Ω–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å: {final_price:,.0f} ‚ÇΩ ({hours_count} —á–∞—Å–æ–≤, —Å—Ç–∞–≤–∫–∞ {base_hourly_rate:,.0f} ‚ÇΩ/—á–∞—Å, —Å–∫–∏–¥–∫–∞ {discount}%)",
        price=final_price,
        **user_info
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–∏–¥
    await save_lead(
        user_id=message.from_user.id,
        service_type=service_key,
        calculated_price=final_price,
        **user_info
    )

    await save_user_event(
        user_id=message.from_user.id,
        event_type='final_service_select',
        event_data={
            'main_service': user_data.get('main_service'),
            'final_service': service_key,
            'hours_count': hours_count,
            'discount': discount,
            'calculated_price': final_price
        },
        **user_info
    )

    specialist_level = "–í–µ–¥—É—â–∏–π –≥–µ–æ–º–µ—Ö–∞–Ω–∏–∫" if service_key == "senior_geomechanic" else "–ì–ª–∞–≤–Ω—ã–π –≥–µ–æ–º–µ—Ö–∞–Ω–∏–∫"

    service_text = f"""
üë®‚Äçüíº {specialist_level}

–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤: {hours_count}
–°—Ç–∞–≤–∫–∞: {base_hourly_rate:,.0f} ‚ÇΩ/—á–∞—Å
–°–∫–∏–¥–∫–∞: {discount}%

–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: –æ—Ç {final_price:,.0f} ‚ÇΩ

–•–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏?
    """

    await state.set_state(Calculation.showing_price)
    await state.update_data(
        final_service=service_key,
        calculated_price=final_price
    )

    await message.answer(
        service_text,
        reply_markup=get_contact_keyboard()
    )


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–∞—Å—á–µ—Ç–æ–≤ —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏
@router.message(ServiceSelection.waiting_for_calculations_count, F.text)
async def process_calculations_count(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–∞—Å—á–µ—Ç–æ–≤ —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏"""
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await state.set_state(ServiceSelection.waiting_for_subservice)
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å—á–µ—Ç–∞:",
            reply_markup=get_stability_keyboard()
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ —á–∏—Å–ª–æ
    if not message.text.isdigit():
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—Å—á–µ—Ç–æ–≤:",
            reply_markup=get_back_keyboard()
        )
        return

    calculations_count = int(message.text)

    if calculations_count <= 0:
        await message.answer(
            "‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—Å—á–µ—Ç–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0:",
            reply_markup=get_back_keyboard()
        )
        return

    user_data = await state.get_data()
    service_key = user_data.get('service_key')

    if not service_key:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return

    base_price = SERVICE_BASE_PRICES.get(service_key, 0)

    if base_price == 0:
        await message.answer("‚ùå –£—Å–ª—É–≥–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        return

    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–∫–∏–¥–∫–∏
    discount = 0
    if calculations_count >= 10:
        discount = 20
    elif calculations_count >= 5:
        discount = 10

    total_price = base_price * calculations_count
    final_price = total_price * (100 - discount) / 100

    user_info = {
        'username': message.from_user.username,
        'first_name': message.from_user.first_name,
        'last_name': message.from_user.last_name
    }

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å—á–µ—Ç
    await save_calculation(
        user_id=message.from_user.id,
        service_type=service_key,
        parameters={'calculations_count': calculations_count},
        result=f"–†–∞—Å—Å—á–∏—Ç–∞–Ω–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å: {final_price:,.0f} ‚ÇΩ ({calculations_count} —Ä–∞—Å—á–µ—Ç–æ–≤, —Å–∫–∏–¥–∫–∞ {discount}%)",
        price=final_price,
        **user_info
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–∏–¥
    await save_lead(
        user_id=message.from_user.id,
        service_type=service_key,
        calculated_price=final_price,
        **user_info
    )

    await save_user_event(
        user_id=message.from_user.id,
        event_type='final_service_select',
        event_data={
            'main_service': user_data.get('main_service'),
            'final_service': service_key,
            'calculations_count': calculations_count,
            'discount': discount,
            'calculated_price': final_price
        },
        **user_info
    )

    service_names = {
        "2d_ogr": "2D –û–ì–† (–û–ì–† ‚Äì –æ—Ç–∫—Ä—ã—Ç—ã–µ –≥–æ—Ä–Ω—ã–µ —Ä–∞–±–æ—Ç—ã)",
        "2d_pgr": "2D –ü–ì–† (–ü–ì–† ‚Äì –ø–æ–¥–∑–µ–º–Ω—ã–µ –≥–æ—Ä–Ω—ã–µ —Ä–∞–±–æ—Ç—ã)",
        "3d_ogr": "3D –û–ì–† (–û–ì–† ‚Äì –æ—Ç–∫—Ä—ã—Ç—ã–µ –≥–æ—Ä–Ω—ã–µ —Ä–∞–±–æ—Ç—ã)",
        "3d_pgr": "3D –ü–ì–† (–ü–ì–† ‚Äì –ø–æ–¥–∑–µ–º–Ω—ã–µ –≥–æ—Ä–Ω—ã–µ —Ä–∞–±–æ—Ç—ã)"
    }

    service_text = f"""
{service_names.get(service_key, "–†–∞—Å—á–µ—Ç —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏")}

–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—Å—á–µ—Ç–æ–≤: {calculations_count}
–°–∫–∏–¥–∫–∞: {discount}%

–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: –æ—Ç {final_price:,.0f} ‚ÇΩ

–•–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏?
    """

    await state.set_state(Calculation.showing_price)
    await state.update_data(
        final_service=service_key,
        calculated_price=final_price
    )

    await message.answer(
        service_text,
        reply_markup=get_contact_keyboard()
    )


# ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (process_geotech_wells_answer, process_geo_wells_answer,
# process_fms_answer_and_calculate, process_drilling_rigs_count) –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ...

@router.message(F.text == "‚úÖ –û—Å—Ç–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã")
async def request_contacts(message: Message, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –ø–æ—Å–ª–µ —Ä–∞—Å—á–µ—Ç–∞"""
    # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏
    await state.clear()

    await save_user_event(
        user_id=message.from_user.id,
        event_type='contacts_request',
        event_data={},
        username=message.from_user.username,
        first_name=message.from_user.first_name,
        last_name=message.from_user.last_name
    )

    await state.set_state(ContactCollection.waiting_for_name)

    contacts_text = """
üìû –°–±–æ—Ä –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤

–î–ª—è —Å–≤—è–∑–∏ —Å –Ω–∞—à–∏–º–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º–∏ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–∞–º –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –≤–∞—à–∞ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è.

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:
    """

    await message.answer(
        contacts_text,
        reply_markup=get_back_keyboard()
    )

# ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (back_from_questions, back_from_subservice) –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ...
# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –î–ê/–ù–ï–¢ –¥–ª—è –≥–µ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Å–∫–≤–∞–∂–∏–Ω
@router.message(ServiceSelection.waiting_for_geo_wells, F.text.in_(["‚úÖ –î–∞", "‚ùå –ù–µ—Ç"]))
async def process_geo_wells_answer(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ –Ω–∞–ª–∏—á–∏–∏ –±–∞–∑—ã –≥–µ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Å–∫–≤–∞–∂–∏–Ω"""
    answer = message.text == "‚úÖ –î–∞"

    await state.update_data(geo_wells=answer)
    await state.set_state(ServiceSelection.waiting_for_fms_data)

    next_question = """
–û—Ç–ª–∏—á–Ω–æ! –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å:

–ï—Å—Ç—å –ª–∏ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ –§–ú–°?
    """

    await message.answer(
        next_question,
        reply_markup=get_yes_no_keyboard()
    )


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –î–ê/–ù–ï–¢ –¥–ª—è –§–ú–° –∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞
@router.message(ServiceSelection.waiting_for_fms_data, F.text.in_(["‚úÖ –î–∞", "‚ùå –ù–µ—Ç"]))
async def process_fms_answer_and_calculate(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ –Ω–∞–ª–∏—á–∏–∏ –§–ú–° –∏ —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏"""
    answer = message.text == "‚úÖ –î–∞"

    user_data = await state.get_data()
    service_key = user_data.get('service_key', 'program_development')

    # –ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞
    base_price = SERVICE_BASE_PRICES.get(service_key, 300000)

    # –õ–æ–≥–∏–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ (–º–æ–∂–Ω–æ —É—Å–ª–æ–∂–Ω–∏—Ç—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ—Ç–≤–µ—Ç–æ–≤)
    final_price = base_price

    # –ï—Å–ª–∏ –µ—Å—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ - –Ω–µ–±–æ–ª—å—à–∞—è —Å–∫–∏–¥–∫–∞
    if (user_data.get('geotech_wells') and
            user_data.get('geo_wells') and
            answer):
        final_price = int(base_price * 0.9)  # 10% —Å–∫–∏–¥–∫–∞

    user_info = {
        'username': message.from_user.username,
        'first_name': message.from_user.first_name,
        'last_name': message.from_user.last_name
    }

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å—á–µ—Ç
    await save_calculation(
        user_id=message.from_user.id,
        service_type=service_key,
        parameters={
            'geotech_wells': user_data.get('geotech_wells'),
            'geo_wells': user_data.get('geo_wells'),
            'fms_data': answer
        },
        result=f"–†–∞—Å—Å—á–∏—Ç–∞–Ω–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥–∏: {final_price:,} ‚ÇΩ",
        price=final_price,
        **user_info
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–∏–¥
    await save_lead(
        user_id=message.from_user.id,
        service_type=service_key,
        calculated_price=final_price,
        **user_info
    )

    await save_user_event(
        user_id=message.from_user.id,
        event_type='final_service_select',
        event_data={
            'main_service': user_data.get('main_service'),
            'final_service': service_key,
            'calculated_price': final_price,
            'answers': {
                'geotech_wells': user_data.get('geotech_wells'),
                'geo_wells': user_data.get('geo_wells'),
                'fms_data': answer
            }
        },
        **user_info
    )

    service_text = f"""
üìù –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã –≥–µ–æ—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π

–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: –æ—Ç {final_price:,} ‚ÇΩ

–•–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏?
    """

    await state.set_state(Calculation.showing_price)
    await state.update_data(
        final_service=service_key,
        calculated_price=final_price
    )

    await message.answer(
        service_text,
        reply_markup=get_contact_keyboard()
    )


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±—É—Ä–æ–≤—ã—Ö —Å—Ç–∞–Ω–∫–æ–≤
@router.message(ServiceSelection.waiting_for_drilling_rigs, F.text)
async def process_drilling_rigs_count(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±—É—Ä–æ–≤—ã—Ö —Å—Ç–∞–Ω–∫–æ–≤"""
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await state.set_state(ServiceSelection.waiting_for_subservice)
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:",
            reply_markup=get_geodata_keyboard()
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ —á–∏—Å–ª–æ
    if not message.text.isdigit():
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±—É—Ä–æ–≤—ã—Ö —Å—Ç–∞–Ω–∫–æ–≤:",
            reply_markup=get_back_keyboard()
        )
        return

    rigs_count = int(message.text)

    if rigs_count <= 0:
        await message.answer(
            "‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞–Ω–∫–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0:",
            reply_markup=get_back_keyboard()
        )
        return

    user_data = await state.get_data()
    service_key = user_data.get('service_key', 'core_documentation')

    # –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏: 3 –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ç–æ—Ä–∞ –Ω–∞ —Å—Ç–∞–Ω–æ–∫, –∫–∞–∂–¥—ã–π –ø–æ 300,000 —Ä—É–±/–º–µ—Å
    documentators_per_rig = 3
    cost_per_documentator = 300000
    total_documentators = rigs_count * documentators_per_rig
    final_price = total_documentators * cost_per_documentator

    user_info = {
        'username': message.from_user.username,
        'first_name': message.from_user.first_name,
        'last_name': message.from_user.last_name
    }

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å—á–µ—Ç
    await save_calculation(
        user_id=message.from_user.id,
        service_type=service_key,
        parameters={'rigs_count': rigs_count},
        result=f"–†–∞—Å—Å—á–∏—Ç–∞–Ω–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å: {final_price:,} ‚ÇΩ/–º–µ—Å ({rigs_count} —Å—Ç–∞–Ω–∫–æ–≤ √ó {documentators_per_rig} –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ç–æ—Ä–æ–≤)",
        price=final_price,
        **user_info
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–∏–¥
    await save_lead(
        user_id=message.from_user.id,
        service_type=service_key,
        calculated_price=final_price,
        **user_info
    )

    await save_user_event(
        user_id=message.from_user.id,
        event_type='final_service_select',
        event_data={
            'main_service': user_data.get('main_service'),
            'final_service': service_key,
            'rigs_count': rigs_count,
            'calculated_price': final_price
        },
        **user_info
    )

    service_text = f"""
üíé –ì–µ–æ—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–µ—Ä–Ω–∞

–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞–Ω–∫–æ–≤: {rigs_count}
–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ç–æ—Ä–æ–≤: {total_documentators}

–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: –æ—Ç {final_price:,} ‚ÇΩ –≤ –º–µ—Å—è—Ü

–•–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏?
    """

    await state.set_state(Calculation.showing_price)
    await state.update_data(
        final_service=service_key,
        calculated_price=final_price
    )

    await message.answer(
        service_text,
        reply_markup=get_contact_keyboard()
    )


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–∞—Å—á–µ—Ç–æ–≤ —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏
@router.message(ServiceSelection.waiting_for_calculations_count, F.text)
async def process_calculations_count(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–∞—Å—á–µ—Ç–æ–≤ —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏"""
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await state.set_state(ServiceSelection.waiting_for_subservice)
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å—á–µ—Ç–∞:",
            reply_markup=get_stability_keyboard()
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ —á–∏—Å–ª–æ
    if not message.text.isdigit():
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—Å—á–µ—Ç–æ–≤:",
            reply_markup=get_back_keyboard()
        )
        return

    calculations_count = int(message.text)

    if calculations_count <= 0:
        await message.answer(
            "‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—Å—á–µ—Ç–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0:",
            reply_markup=get_back_keyboard()
        )
        return

    user_data = await state.get_data()
    service_key = user_data.get('service_key')

    if not service_key:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return

    base_price = SERVICE_BASE_PRICES.get(service_key, 0)

    if base_price == 0:
        await message.answer("‚ùå –£—Å–ª—É–≥–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        return

    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–∫–∏–¥–∫–∏
    discount = 0
    if calculations_count >= 10:
        discount = 20
    elif calculations_count >= 5:
        discount = 10

    total_price = base_price * calculations_count
    final_price = total_price * (100 - discount) / 100

    user_info = {
        'username': message.from_user.username,
        'first_name': message.from_user.first_name,
        'last_name': message.from_user.last_name
    }

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å—á–µ—Ç
    await save_calculation(
        user_id=message.from_user.id,
        service_type=service_key,
        parameters={'calculations_count': calculations_count},
        result=f"–†–∞—Å—Å—á–∏—Ç–∞–Ω–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å: {final_price:,.0f} ‚ÇΩ ({calculations_count} —Ä–∞—Å—á–µ—Ç–æ–≤, —Å–∫–∏–¥–∫–∞ {discount}%)",
        price=final_price,
        **user_info
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–∏–¥
    await save_lead(
        user_id=message.from_user.id,
        service_type=service_key,
        calculated_price=final_price,
        **user_info
    )

    await save_user_event(
        user_id=message.from_user.id,
        event_type='final_service_select',
        event_data={
            'main_service': user_data.get('main_service'),
            'final_service': service_key,
            'calculations_count': calculations_count,
            'discount': discount,
            'calculated_price': final_price
        },
        **user_info
    )

    service_names = {
        "2d_ogr": "2D –û–ì–†",
        "2d_pgr": "2D –ü–ì–†",
        "3d_ogr": "3D –û–ì–†",
        "3d_pgr": "3D –ü–ì–†"
    }

    service_text = f"""
{service_names.get(service_key, "–†–∞—Å—á–µ—Ç —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏")}

–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—Å—á–µ—Ç–æ–≤: {calculations_count}
–°–∫–∏–¥–∫–∞: {discount}%

–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: –æ—Ç {final_price:,.0f} ‚ÇΩ

–•–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏?
    """

    await state.set_state(Calculation.showing_price)
    await state.update_data(
        final_service=service_key,
        calculated_price=final_price
    )

    await message.answer(
        service_text,
        reply_markup=get_contact_keyboard()
    )


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —á–∞—Å–æ–≤ –≥–µ–æ–º–µ—Ö–∞–Ω–∏–∫–∞
@router.message(ServiceSelection.waiting_for_hours_count, F.text)
async def process_hours_count(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —á–∞—Å–æ–≤ –¥–ª—è –≥–µ–æ–º–µ—Ö–∞–Ω–∏–∫–∞"""
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await state.set_state(ServiceSelection.waiting_for_subservice)
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞:",
            reply_markup=get_geomechanic_keyboard()
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ —á–∏—Å–ª–æ
    if not re.match(r'^\d+$', message.text):
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ):",
            reply_markup=get_back_keyboard()
        )
        return

    hours_count = int(message.text)

    # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–∞–∫–µ—Ç - 4 —á–∞—Å–∞
    if hours_count < 4:
        await message.answer(
            "‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–∞–∫–µ—Ç - 4 —á–∞—Å–∞. –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤:",
            reply_markup=get_back_keyboard()
        )
        return

    user_data = await state.get_data()
    service_key = user_data.get('service_key')

    if not service_key:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return

    base_hourly_rate = SERVICE_BASE_PRICES.get(service_key, 0)

    if base_hourly_rate == 0:
        await message.answer("‚ùå –£—Å–ª—É–≥–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        return

    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–∫–∏–¥–∫—É –ø—Ä–∏ –±–æ–ª—å—à–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —á–∞—Å–æ–≤
    discount = 10 if hours_count >= 10 else 0

    total_price = base_hourly_rate * hours_count
    final_price = total_price * (100 - discount) / 100

    user_info = {
        'username': message.from_user.username,
        'first_name': message.from_user.first_name,
        'last_name': message.from_user.last_name
    }

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å—á–µ—Ç
    await save_calculation(
        user_id=message.from_user.id,
        service_type=service_key,
        parameters={'hours_count': hours_count},
        result=f"–†–∞—Å—Å—á–∏—Ç–∞–Ω–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å: {final_price:,.0f} ‚ÇΩ ({hours_count} —á–∞—Å–æ–≤, —Å—Ç–∞–≤–∫–∞ {base_hourly_rate:,.0f} ‚ÇΩ/—á–∞—Å, —Å–∫–∏–¥–∫–∞ {discount}%)",
        price=final_price,
        **user_info
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–∏–¥
    await save_lead(
        user_id=message.from_user.id,
        service_type=service_key,
        calculated_price=final_price,
        **user_info
    )

    await save_user_event(
        user_id=message.from_user.id,
        event_type='final_service_select',
        event_data={
            'main_service': user_data.get('main_service'),
            'final_service': service_key,
            'hours_count': hours_count,
            'discount': discount,
            'calculated_price': final_price
        },
        **user_info
    )

    specialist_level = "–í–µ–¥—É—â–∏–π –≥–µ–æ–º–µ—Ö–∞–Ω–∏–∫" if service_key == "senior_geomechanic" else "–ì–ª–∞–≤–Ω—ã–π –≥–µ–æ–º–µ—Ö–∞–Ω–∏–∫"

    service_text = f"""
üë®‚Äçüíº {specialist_level}

–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤: {hours_count}
–°—Ç–∞–≤–∫–∞: {base_hourly_rate:,.0f} ‚ÇΩ/—á–∞—Å
–°–∫–∏–¥–∫–∞: {discount}%

–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: –æ—Ç {final_price:,.0f} ‚ÇΩ

–•–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏?
    """

    await state.set_state(Calculation.showing_price)
    await state.update_data(
        final_service=service_key,
        calculated_price=final_price
    )

    await message.answer(
        service_text,
        reply_markup=get_contact_keyboard()
    )


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ù–∞–∑–∞–¥ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö –≤–≤–æ–¥–∞
@router.message(
    ServiceSelection.waiting_for_geotech_wells,
    ServiceSelection.waiting_for_geo_wells,
    ServiceSelection.waiting_for_fms_data,
    F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"
)
async def back_from_questions(message: Message, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∏–∑ –≤–æ–ø—Ä–æ—Å–æ–≤ –∫ –≤—ã–±–æ—Ä—É —É—Å–ª—É–≥–∏"""
    await state.set_state(ServiceSelection.waiting_for_subservice)

    user_data = await state.get_data()
    main_service = user_data.get('main_service', 'geodata_collection')

    if main_service == 'geodata_collection':
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:",
            reply_markup=get_geodata_keyboard()
        )
    else:
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:",
            reply_markup=get_main_menu_keyboard()
        )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ù–∞–∑–∞–¥
@router.message(ServiceSelection.waiting_for_subservice, F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def back_from_subservice(message: Message, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∏–∑ –ø–æ–¥—É—Å–ª—É–≥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await state.clear()

    await save_user_event(
        user_id=message.from_user.id,
        event_type='navigation',
        event_data={'page': 'main_menu', 'from': 'subservice'},
        username=message.from_user.username,
        first_name=message.from_user.first_name,
        last_name=message.from_user.last_name
    )

    await message.answer(
        "üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é - –≤—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:",
        reply_markup=get_main_menu_keyboard()
    )