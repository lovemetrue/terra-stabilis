from aiogram import Router, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from asgiref.sync import sync_to_async

from app.bot.states import ContactCollection
from app.bot.keyboards.main_menu import (get_skip_keyboard,
                                         get_main_menu_keyboard,
                                         get_contact_keyboard,
                                         get_back_keyboard)  # –î–æ–±–∞–≤–∏–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ç–æ–ª—å–∫–æ —Å "–ù–∞–∑–∞–¥"
from apps.bot_data.models import BotLead, BotUserEvent

router = Router()


@router.message(ContactCollection.waiting_for_name)
async def process_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏"""
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await state.clear()
        await message.answer(
            "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=get_main_menu_keyboard()
        )
        return

    await state.update_data(name=message.text)
    await state.set_state(ContactCollection.waiting_for_phone)

    await sync_to_async(BotUserEvent.objects.create)(
        user_id=message.from_user.id,
        event_type='contact_name_provided',
        event_data={'name': message.text}
    )

    await message.answer(
        "üì± –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
        reply_markup=get_back_keyboard()  # –î–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π - —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    )


@router.message(ContactCollection.waiting_for_phone)
async def process_phone(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await state.set_state(ContactCollection.waiting_for_name)
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:",
            reply_markup=get_back_keyboard()
        )
        return

    await state.update_data(phone=message.text)
    await state.set_state(ContactCollection.waiting_for_email)

    await sync_to_async(BotUserEvent.objects.create)(
        user_id=message.from_user.id,
        event_type='contact_phone_provided',
        event_data={'phone': message.text}
    )

    await message.answer(
        "üìß –í–≤–µ–¥–∏—Ç–µ –≤–∞—à email (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):",
        reply_markup=get_skip_keyboard()  # –î–ª—è –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π - "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" –∏ "–ù–∞–∑–∞–¥"
    )


@router.message(ContactCollection.waiting_for_email)
async def process_email(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ email"""
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await state.set_state(ContactCollection.waiting_for_phone)
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
            reply_markup=get_back_keyboard()
        )
        return

    email = None
    if message.text != "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        email = message.text

    await state.update_data(email=email)
    await state.set_state(ContactCollection.waiting_for_company)

    await sync_to_async(BotUserEvent.objects.create)(
        user_id=message.from_user.id,
        event_type='contact_email_provided',
        event_data={'email': email}
    )

    await message.answer(
        "üè¢ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):",
        reply_markup=get_skip_keyboard()
    )


@router.message(ContactCollection.waiting_for_company)
async def process_company(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–ø–∞–Ω–∏–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª–∏–¥–∞"""
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await state.set_state(ContactCollection.waiting_for_email)
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:",
            reply_markup=get_skip_keyboard()
        )
        return

    company = None
    if message.text != "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        company = message.text

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    user_data = await state.get_data()

    # –°–æ–∑–¥–∞–µ–º –ª–∏–¥ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    lead = await sync_to_async(BotLead.objects.create)(
        name=user_data['name'],
        phone=user_data['phone'],
        email=user_data.get('email'),
        company=company,
        service_type=user_data.get('final_service'),
        calculated_price=user_data.get('calculated_price'),
        source="telegram"
    )

    await sync_to_async(BotUserEvent.objects.create)(
        user_id=message.from_user.id,
        event_type='lead_created',
        event_data={'lead_id': lead.id}
    )

    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

    success_text = f"""
‚úÖ –°–ø–∞—Å–∏–±–æ, {user_data['name']}!

–í–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. 
–ù–∞—à —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.

–ù–æ–º–µ—Ä –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏: #{lead.id}

–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å —Å—Ä–æ—á–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –∑–≤–æ–Ω–∏—Ç–µ: +7 (XXX) XXX-XX-XX

–•–æ—Ç–∏—Ç–µ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –µ—â–µ –æ–¥–Ω—É —É—Å–ª—É–≥—É?
    """

    await message.answer(
        success_text,
        reply_markup=get_main_menu_keyboard()
    )