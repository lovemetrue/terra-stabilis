from aiogram import Router, F
from aiogram.types import Message, Contact
from aiogram.fsm.context import FSMContext
import re

from app.bot.states import ContactCollection, PhoneInput
from app.bot.keyboards.main_menu import *
from apps.bot_data.bot_utils import save_user_event, save_contact, validate_email, format_user_data_for_confirmation

router = Router()


def validate_phone_number(phone: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    # –£–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ +
    cleaned_phone = re.sub(r'[^\d+]', '', phone)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ –Ω–æ–º–µ—Ä–∞
    russian_pattern = re.compile(r'^(\+7|7|8)?[\s\-]?\(?[489][0-9]{2}\)?[\s\-]?[0-9]{3}[\s\-]?[0-9]{2}[\s\-]?[0-9]{2}$')

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ –Ω–æ–º–µ—Ä–∞
    international_pattern = re.compile(r'^\+\d{1,3}[\s\-]?\(?\d{1,4}\)?[\s\-]?\d{1,4}[\s\-]?\d{1,4}[\s\-]?\d{1,4}$')

    return bool(russian_pattern.match(phone) or international_pattern.match(cleaned_phone))


def format_phone_number(phone: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    # –£–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã
    digits = re.sub(r'\D', '', phone)

    # –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 8, –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ +7
    if digits.startswith('8') and len(digits) == 11:
        digits = '7' + digits[1:]

    # –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –±–µ–∑ –∫–æ–¥–∞ —Å—Ç—Ä–∞–Ω—ã, –¥–æ–±–∞–≤–ª—è–µ–º +7
    if len(digits) == 10:
        digits = '7' + digits

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–∞–∫ +7 (XXX) XXX-XX-XX
    if digits.startswith('7') and len(digits) == 11:
        return f"+7 ({digits[1:4]}) {digits[4:7]}-{digits[7:9]}-{digits[9:]}"

    return f"+{digits}" if not phone.startswith('+') else phone


@router.message(ContactCollection.waiting_for_name)
async def process_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏"""
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await state.clear()
        await message.answer(
            "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=get_main_menu_keyboard()
        )
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å" –≤ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    if message.text == "üöÄ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å":
        await state.clear()
        await message.answer(
            "üìã –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —É—Å–ª—É–≥–∏:",
            reply_markup=get_main_menu_keyboard()
        )
        return

    await state.update_data(name=message.text)
    await state.set_state(ContactCollection.waiting_for_phone)

    await save_user_event(
        user_id=message.from_user.id,
        event_type='contact_name_provided',
        event_data={'name': message.text},
        username=message.from_user.username,
        first_name=message.from_user.first_name,
        last_name=message.from_user.last_name
    )

    phone_text = """
üì± –¢–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —Å–≤—è–∑–∏

–í—ã –º–æ–∂–µ—Ç–µ:
‚Ä¢ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)
‚Ä¢ –í–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –≤—Ä—É—á–Ω—É—é

–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–±:
    """

    await message.answer(
        phone_text,
        reply_markup=get_phone_input_keyboard()
    )


@router.message(ContactCollection.waiting_for_phone, F.text == "üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç")
async def request_contact(message: Message, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞"""
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É 'üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã' –Ω–∏–∂–µ:",
        reply_markup=get_phone_input_keyboard()
    )


@router.message(ContactCollection.waiting_for_phone, F.text == "üìù –í–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –≤—Ä—É—á–Ω—É—é")
async def request_manual_phone(message: Message, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    await state.set_state(PhoneInput.waiting_for_phone_input)

    await message.answer(
        "üìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:\n\n"
        "–§–æ—Ä–º–∞—Ç: +7 XXX XXX-XX-XX –∏–ª–∏ 8 XXX XXX-XX-XX\n"
        "–ü—Ä–∏–º–µ—Ä: +7 (912) 345-67-89",
        reply_markup=get_manual_phone_keyboard()
    )


@router.message(ContactCollection.waiting_for_phone, F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def back_from_phone_selection(message: Message, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –æ—Ç –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫ –∏–º–µ–Ω–∏"""
    await state.set_state(ContactCollection.waiting_for_name)

    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:",
        reply_markup=get_back_keyboard()
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å" –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@router.message(ContactCollection.waiting_for_phone, F.text == "üöÄ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å")
async def calculate_from_contacts(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ —Ä–∞—Å—á–µ—Ç–∞ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"""
    await state.clear()
    await message.answer(
        "üìã –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —É—Å–ª—É–≥–∏:",
        reply_markup=get_main_menu_keyboard()
    )


@router.message(ContactCollection.waiting_for_phone, F.contact)
async def process_contact(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞"""
    contact = message.contact
    phone_number = contact.phone_number

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä
    formatted_phone = format_phone_number(phone_number)

    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(phone=formatted_phone)

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø—Ä–æ—Å—É email
    await state.set_state(ContactCollection.waiting_for_email)

    await message.answer(
        "üìß –•–æ—Ç–µ–ª–∏ –±—ã –≤—ã —É–∫–∞–∑–∞—Ç—å –≤–∞—à email?\n\n"
        "–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞–º –ø–æ–¥—Ä–æ–±–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã –∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é.",
        reply_markup=get_skip_keyboard()
    )


@router.message(PhoneInput.waiting_for_phone_input, F.text)
async def process_manual_phone(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await state.set_state(ContactCollection.waiting_for_phone)
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
            reply_markup=get_phone_input_keyboard()
        )
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å" –≤ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    if message.text == "üöÄ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å":
        await state.clear()
        await message.answer(
            "üìã –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —É—Å–ª—É–≥–∏:",
            reply_markup=get_main_menu_keyboard()
        )
        return

    phone_number = message.text

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–∞
    if not validate_phone_number(phone_number):
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "‚Ä¢ +7 (912) 345-67-89\n"
            "‚Ä¢ 8 (912) 345-67-89\n"
            "‚Ä¢ 89123456789\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            reply_markup=get_manual_phone_keyboard()
        )
        return

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä
    formatted_phone = format_phone_number(phone_number)

    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(phone=formatted_phone)

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø—Ä–æ—Å—É email
    await state.set_state(ContactCollection.waiting_for_email)

    await message.answer(
        "üìß –•–æ—Ç–µ–ª–∏ –±—ã –≤—ã —É–∫–∞–∑–∞—Ç—å –≤–∞—à email?\n\n"
        "–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞–º –ø–æ–¥—Ä–æ–±–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã –∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é.",
        reply_markup=get_skip_keyboard()
    )


@router.message(ContactCollection.waiting_for_email, F.text)
async def process_email_choice(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ email"""
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å" –≤ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    if message.text == "üöÄ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å":
        await state.clear()
        await message.answer(
            "üìã –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —É—Å–ª—É–≥–∏:",
            reply_markup=get_main_menu_keyboard()
        )
        return

    if message.text == "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º email, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
        await state.set_state(ContactCollection.waiting_for_organization)
        await message.answer(
            "üè¢ –•–æ—Ç–µ–ª–∏ –±—ã –≤—ã —É–∫–∞–∑–∞—Ç—å –≤–∞—à—É –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é?\n\n"
            "–≠—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å –≤–∞—à–∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏.",
            reply_markup=get_skip_keyboard()
        )
        return

    elif message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —Å–ø–æ—Å–æ–±–∞ –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        await state.set_state(ContactCollection.waiting_for_phone)
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
            reply_markup=get_phone_input_keyboard()
        )
        return

    else:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª email
        email = message.text.strip()

        if validate_email(email):
            await state.update_data(email=email)
            await state.set_state(ContactCollection.waiting_for_organization)

            await message.answer(
                "üè¢ –•–æ—Ç–µ–ª–∏ –±—ã –≤—ã —É–∫–∞–∑–∞—Ç—å –≤–∞—à—É –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é?\n\n"
                "–≠—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å –≤–∞—à–∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏.",
                reply_markup=get_skip_keyboard()
            )
        else:
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email.\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å:\n"
                "–ü—Ä–∏–º–µ—Ä: example@company.com",
                reply_markup=get_skip_keyboard()
            )


@router.message(ContactCollection.waiting_for_organization, F.text)
async def process_organization_choice(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏"""
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å" –≤ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    if message.text == "üöÄ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å":
        await state.clear()
        await message.answer(
            "üìã –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —É—Å–ª—É–≥–∏:",
            reply_markup=get_main_menu_keyboard()
        )
        return

    if message.text == "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
        await show_confirmation(message, state)
        return

    elif message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ email
        await state.set_state(ContactCollection.waiting_for_email)
        await message.answer(
            "üìß –•–æ—Ç–µ–ª–∏ –±—ã –≤—ã —É–∫–∞–∑–∞—Ç—å –≤–∞—à email?",
            reply_markup=get_skip_keyboard()
        )
        return

    else:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
        organization = message.text.strip()
        await state.update_data(organization=organization)
        await show_confirmation(message, state)


async def show_confirmation(message: Message, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö"""
    user_data = await state.get_data()

    confirmation_text = f"""
‚úÖ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:

{format_user_data_for_confirmation(user_data)}

–í—Å—ë –≤–µ—Ä–Ω–æ?
    """

    await state.set_state(ContactCollection.confirmation)
    await message.answer(
        confirmation_text,
        reply_markup=get_confirmation_keyboard()
    )


@router.message(ContactCollection.confirmation, F.text == "‚úÖ –í—Å—ë –≤–µ—Ä–Ω–æ")
async def process_confirmation(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"""
    user_data = await state.get_data()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    await save_contact(
        user_id=message.from_user.id,
        phone=user_data.get('phone'),
        name=user_data.get('name'),
        email=user_data.get('email'),
        organization=user_data.get('organization'),
        username=message.from_user.username,
        first_name=message.from_user.first_name,
        last_name=message.from_user.last_name
    )

    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —É—Å–ø–µ—à–Ω–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
    name = user_data.get('name', '')
    success_text = f"""
‚úÖ –°–ø–∞—Å–∏–±–æ, {name}!

–í–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. 
–ù–∞—à —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.

–•–æ—Ç–∏—Ç–µ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –µ—â–µ –æ–¥–Ω—É —É—Å–ª—É–≥—É?
    """

    await message.answer(
        success_text,
        reply_markup=get_main_menu_keyboard()
    )


@router.message(ContactCollection.confirmation, F.text == "‚úèÔ∏è –ò—Å–ø—Ä–∞–≤–∏—Ç—å")
async def process_correction(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö"""
    await state.set_state(ContactCollection.waiting_for_name)

    await message.answer(
        "–î–∞–≤–∞–π—Ç–µ –∏—Å–ø—Ä–∞–≤–∏–º –¥–∞–Ω–Ω—ã–µ. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:",
        reply_markup=get_back_keyboard()
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å" –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
@router.message(ContactCollection.confirmation, F.text == "üöÄ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å")
async def calculate_from_confirmation(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ —Ä–∞—Å—á–µ—Ç–∞ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    await state.clear()
    await message.answer(
        "üìã –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —É—Å–ª—É–≥–∏:",
        reply_markup=get_main_menu_keyboard()
    )