import os
import sys
import django
import asyncio
import logging
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ Python path
PROJECT_ROOT = Path(__file__).resolve().parent.parent.parent
sys.path.append(str(PROJECT_ROOT))

# –¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ rocket-django-main, —á—Ç–æ–±—ã Django –º–æ–≥ –Ω–∞–π—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ –ø–∞–ø–∫–µ apps
ROCKET_DJANGO_ROOT = PROJECT_ROOT / "app" / "admin"
sys.path.append(str(ROCKET_DJANGO_ROOT))

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Django —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –º–æ–¥—É–ª–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–∫
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')

try:
    django.setup()
    print("‚úÖ Django —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω —Å –º–æ–¥—É–ª–µ–º: config.settings")
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Django: {e}")
    import traceback

    traceback.print_exc()
    sys.exit(1)

from aiogram import Bot, Dispatcher
from aiogram.fsm.storage.redis import RedisStorage

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Django
from app.config import settings
from app.bot.handlers import start, qualification, contacts, common
from app.bot.middlewares.django_middleware import DjangoMiddleware
from app.database.redis_client import redis_client

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


async def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
    storage = RedisStorage(redis=redis_client)
    bot = Bot(token=settings.BOT_TOKEN)
    dp = Dispatcher(storage=storage)

    # Middleware –¥–ª—è Django
    dp.update.middleware(DjangoMiddleware())

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–æ–≤
    dp.include_router(start.router)
    dp.include_router(qualification.router)
    dp.include_router(contacts.router)
    dp.include_router(common.router)

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    try:
        logger.info("üöÄ Starting Telegram Bot with Django ORM...")
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"‚ùå Bot error: {e}")
    finally:
        await bot.session.close()
        await redis_client.close()


if __name__ == "__main__":
    asyncio.run(main())