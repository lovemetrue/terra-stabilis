# bot_data/views.py

from django.shortcuts import render
from django.http import JsonResponse
from django.db.models import Count, Q, Avg
from django.utils import timezone
from datetime import timedelta, datetime
from .models import BotUserEvent, BotCalculation, BotLead
from django.contrib.auth.decorators import login_required


@login_required
def bot_dashboard(request):
    """–î–∞—à–±–æ—Ä–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–∞ —Å —Å–µ—Ä–≤–µ—Ä–Ω—ã–º —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–æ–º"""
    print("üîç –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞...")  # –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

    # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    total_calculations = BotCalculation.objects.count()
    total_logins = BotUserEvent.objects.filter(event_type='login').count()
    total_leads = BotLead.objects.count()
    total_events = BotUserEvent.objects.count()

    print(f"üìä –ú–µ—Ç—Ä–∏–∫–∏: —Ä–∞—Å—á–µ—Ç—ã={total_calculations}, –≤—Ö–æ–¥—ã={total_logins}, –ª–∏–¥—ã={total_leads}, —Å–æ–±—ã—Ç–∏—è={total_events}")

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —É—Å–ª—É–≥–∞–º –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π)
    thirty_days_ago = datetime.now() - timedelta(days=30)

    services_data = BotCalculation.objects.filter(created_at__gte=thirty_days_ago) \
        .exclude(service_type__isnull=True) \
        .values('service_type') \
        .annotate(count=Count('id')) \
        .order_by('-count')

    print(f"üìà –£—Å–ª—É–≥–∏ –ø–æ —Ä–∞—Å—á–µ—Ç–∞–º: {list(services_data)}")

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ª–∏–¥–∞–º
    lead_services_data = BotLead.objects.filter(created_at__gte=thirty_days_ago) \
        .exclude(service_type__isnull=True) \
        .values('service_type') \
        .annotate(count=Count('id')) \
        .order_by('-count')

    print(f"üë• –£—Å–ª—É–≥–∏ –ø–æ –ª–∏–¥–∞–º: {list(lead_services_data)}")

    # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ 7 –¥–Ω–µ–π
    seven_days_ago = datetime.now() - timedelta(days=7)
    activity_data = BotUserEvent.objects.filter(created_at__gte=seven_days_ago) \
        .extra({'date': "date(created_at)"}) \
        .values('date') \
        .annotate(count=Count('id')) \
        .order_by('date')

    print(f"üìÖ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {list(activity_data)}")

    # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏–π —É—Å–ª—É–≥
    SERVICE_NAMES_RU = {
        "program_development": "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã",
        "mapping": "–ì–µ–æ—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∫–∞—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ",
        "core_documentation": "–î–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–µ—Ä–Ω–∞",
        "2d_ogr": "2D —Ä–∞—Å—á–µ—Ç (–û–ì–†)",
        "2d_pgr": "2D —Ä–∞—Å—á–µ—Ç (–ü–ì–†)",
        "3d_ogr": "3D —Ä–∞—Å—á–µ—Ç (–û–ì–†)",
        "3d_pgr": "3D —Ä–∞—Å—á–µ—Ç (–ü–ì–†)",
        "geomechanic": "–ì–µ–æ–º–µ—Ö–∞–Ω–∏–∫ –Ω–∞ —á–∞—Å",
        "georadar": "–ì–µ–æ—Ä–∞–¥–∞—Ä–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥",
        "prism": "–ü—Ä–∏–∑–º–µ–Ω–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥",
        "geodata_collection": "–°–±–æ—Ä –≥–µ–æ–¥–∞–Ω–Ω—ã—Ö",
        "stability_calculation": "–†–∞—Å—á–µ—Ç —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏",
        "monitoring": "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"
    }

    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏—è —É—Å–ª—É–≥ –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤
    services_translated = {}
    for service in services_data:
        ru_name = SERVICE_NAMES_RU.get(service['service_type'], service['service_type'])
        services_translated[ru_name] = service['count']

    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏—è —É—Å–ª—É–≥ –¥–ª—è –ª–∏–¥–æ–≤
    lead_services_translated = {}
    for service in lead_services_data:
        ru_name = SERVICE_NAMES_RU.get(service['service_type'], service['service_type'])
        lead_services_translated[ru_name] = service['count']

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    activity_formatted = []
    for item in activity_data:
        activity_formatted.append({
            'date': item['date'].strftime('%Y-%m-%d'),
            'count': item['count']
        })

    # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –¥–Ω–∏
    today = datetime.now().date()
    full_activity = []
    for i in range(7):
        date = today - timedelta(days=6 - i)
        date_str = date.strftime('%Y-%m-%d')
        activity_for_date = next((item for item in activity_formatted if item['date'] == date_str), None)
        full_activity.append({
            'date': date_str,
            'count': activity_for_date['count'] if activity_for_date else 0
        })

    print(f"üéØ Final data - Services: {services_translated}")
    print(f"üéØ Final data - Leads: {lead_services_translated}")
    print(f"üéØ Final data - Activity: {full_activity}")

    context = {
        'parent': 'bot_data',
        'segment': 'bot_dashboard',
        'total_calculations': total_calculations,
        'total_logins': total_logins,
        'total_leads': total_leads,
        'total_events': total_events,
        'services_data': services_translated,
        'lead_services_data': lead_services_translated,
        'activity_data': full_activity,
    }

    return render(request, 'bot_data/dashboard.html', context)

@login_required
def bot_stats_api(request):
    """API –¥–ª—è dashboard - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç JSON —Å –¥–∞–Ω–Ω—ã–º–∏"""

    # –ü–µ—Ä–∏–æ–¥ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π)
    seven_days_ago = datetime.now() - timedelta(days=7)

    # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—Å—á–µ—Ç–æ–≤
    total_calculations = BotCalculation.objects.count()

    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ö–æ–¥–æ–≤ (—Å–æ–±—ã—Ç–∏—è —Ç–∏–ø–∞ 'login')
    total_logins = BotUserEvent.objects.filter(event_type='start').count()

    # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —É—Å–ª—É–≥–∏ –ø–æ —Ä–∞—Å—á–µ—Ç–∞–º
    services_data = BotCalculation.objects.exclude(service_type__isnull=True) \
        .values('service_type') \
        .annotate(count=Count('id')) \
        .order_by('-count')

    services_dict = {item['service_type']: item['count'] for item in services_data}

    # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —É—Å–ª—É–≥–∏ –ø–æ –ª–∏–¥–∞–º
    lead_services_data = BotLead.objects.exclude(service_type__isnull=True) \
        .values('service_type') \
        .annotate(count=Count('id')) \
        .order_by('-count')

    lead_services_dict = {item['service_type']: item['count'] for item in lead_services_data}

    # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ 7 –¥–Ω–µ–π (—Å–æ–±—ã—Ç–∏—è –ø–æ –¥–Ω—è–º)
    activity_data = BotUserEvent.objects.filter(created_at__gte=seven_days_ago) \
        .extra({'date': "date(created_at)"}) \
        .values('date') \
        .annotate(count=Count('id')) \
        .order_by('date')

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
    activity_formatted = []
    for item in activity_data:
        activity_formatted.append({
            'date': item['date'].strftime('%Y-%m-%d'),
            'count': item['count']
        })

    # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –¥–Ω–∏ –Ω—É–ª—è–º–∏
    today = datetime.now().date()
    full_activity = []
    for i in range(7):
        date = today - timedelta(days=6 - i)  # –æ—Ç 6 –¥–Ω–µ–π –Ω–∞–∑–∞–¥ –¥–æ —Å–µ–≥–æ–¥–Ω—è
        date_str = date.strftime('%Y-%m-%d')

        # –ò—â–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç—Ç–æ–π –¥–∞—Ç—ã
        activity_for_date = next((item for item in activity_formatted if item['date'] == date_str), None)
        full_activity.append({
            'date': date_str,
            'count': activity_for_date['count'] if activity_for_date else 0
        })

    response_data = {
        'total_calculations': total_calculations,
        'total_logins': total_logins,
        'services': services_dict,
        'lead_services': lead_services_dict,
        'activity_7d': full_activity,
        'total_leads': BotLead.objects.count(),
        'total_events': BotUserEvent.objects.count(),
    }

    return JsonResponse(response_data)



@login_required
def bot_leads(request):
    leads = BotLead.objects.all().order_by('-created_at')
    context = {
        'parent': 'bot_data',
        'segment': 'bot_leads',
        'leads': leads
    }
    return render(request, 'bot_data/leads.html', context)

@login_required
def bot_events(request):
    events = BotUserEvent.objects.all().order_by('-created_at')
    context = {
        'parent': 'bot_data',
        'segment': 'bot_events',
        'events': events
    }
    return render(request, 'bot_data/events.html', context)

@login_required
def bot_calculations(request):
    calculations = BotCalculation.objects.all().order_by('-created_at')
    context = {
        'parent': 'bot_data',
        'segment': 'bot_calculations',
        'calculations': calculations
    }
    return render(request, 'bot_data/calculations.html', context)

@login_required
def bot_analytics(request):
    # –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ —É—Å–ª—É–≥–∞–º
    service_stats = BotLead.objects.exclude(service_type__isnull=True)\
                                   .values('service_type')\
                                   .annotate(
                                       count=Count('id'),
                                       avg_price=Avg('calculated_price')
                                   )\
                                   .order_by('-count')
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–Ω—è–º
    thirty_days_ago = datetime.now() - timedelta(days=30)
    daily_leads = BotLead.objects.filter(created_at__gte=thirty_days_ago)\
                                .extra({'date': "date(created_at)"})\
                                .values('date')\
                                .annotate(count=Count('id'))\
                                .order_by('date')
    
    context = {
        'parent': 'bot_data',
        'segment': 'bot_analytics',
        'service_stats': service_stats,
        'daily_leads': daily_leads
    }
    return render(request, 'bot_data/analytics.html', context)

def bot_stats_api(request):
    """
    API —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–∞.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç JSON —Å –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏.
    """
    # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—Å—á–µ—Ç–æ–≤
    total_calculations = BotCalculation.objects.count()
    
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ö–æ–¥–æ–≤ (—Å–æ–±—ã—Ç–∏—è —Ç–∏–ø–∞ 'login')
    total_logins = BotUserEvent.objects.filter(event_type='login').count()
    
    # –†–∞–∑–±–∏–≤–∫–∞ –ø–æ —Ç–∏–ø–∞–º —É—Å–ª—É–≥ (—Ä–∞—Å—á–µ—Ç—ã)
    service_breakdown = BotCalculation.objects.values('service_type').annotate(
        count=Count('id')
    ).order_by('-count')
    services = {item['service_type'] or 'unknown': item['count'] for item in service_breakdown}
    
    # –†–∞–∑–±–∏–≤–∫–∞ –ø–æ —Ç–∏–ø–∞–º —É—Å–ª—É–≥ (–ª–∏–¥—ã)
    leads_breakdown = BotLead.objects.values('service_type').annotate(
        count=Count('id')
    ).order_by('-count')
    lead_services = {item['service_type'] or 'unknown': item['count'] for item in leads_breakdown}
    
    # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
    seven_days_ago = timezone.now() - timedelta(days=6)
    activity_7d = []
    for i in range(7):
        date = seven_days_ago + timedelta(days=i)
        count = BotCalculation.objects.filter(
            created_at__date=date.date()
        ).count()
        activity_7d.append({
            'date': date.strftime('%Y-%m-%d'),
            'count': count
        })
    
    return JsonResponse({
        'total_calculations': total_calculations,
        'total_logins': total_logins,
        'services': services,
        'lead_services': lead_services,
        'activity_7d': activity_7d,
    })


# –î–æ–±–∞–≤—å—Ç–µ –≤ views.py –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
@login_required
def bot_analytics(request):
    # –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ —É—Å–ª—É–≥–∞–º
    service_stats = BotLead.objects.exclude(service_type__isnull=True) \
        .values('service_type') \
        .annotate(
        count=Count('id'),
        avg_price=Avg('calculated_price')
    ) \
        .order_by('-count')

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–Ω—è–º (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π)
    seven_days_ago = datetime.now() - timedelta(days=7)
    daily_leads = BotLead.objects.filter(created_at__gte=seven_days_ago) \
        .extra({'date': "date(created_at)"}) \
        .values('date') \
        .annotate(count=Count('id')) \
        .order_by('date')

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    leads_count = BotLead.objects.count()
    events_count = BotUserEvent.objects.count()
    avg_price = BotLead.objects.exclude(calculated_price__isnull=True) \
                    .aggregate(avg=Avg('calculated_price'))['avg'] or 0

    context = {
        'parent': 'bot_data',
        'segment': 'bot_analytics',
        'service_stats': service_stats,
        'daily_leads': daily_leads,
        'daily_leads_max': max([day['count'] for day in daily_leads] or [0]),
        'leads_count': leads_count,
        'events_count': events_count,
        'avg_price': avg_price,
        'peak_hour': '14:00'  # –ó–∞–≥–ª—É—à–∫–∞, –º–æ–∂–Ω–æ –≤—ã—á–∏—Å–ª–∏—Ç—å —Ä–µ–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    }
    return render(request, 'bot_data/analytics.html', context)

def bot_dashboard(request):
    """
    –î–∞—à–±–æ—Ä–¥ —Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –±–æ—Ç–∞.
    """
    context = {
        'title': '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Telegram –±–æ—Ç–∞'
    }
    return render(request, 'bot_data/dashboard.html', context)
